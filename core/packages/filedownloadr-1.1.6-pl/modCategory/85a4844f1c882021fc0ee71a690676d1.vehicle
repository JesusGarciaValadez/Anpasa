<?php return array (
  'unique_key' => 'category',
  'preserve_keys' => false,
  'update_object' => true,
  'related_objects' => 
  array (
    'Chunks' => 
    array (
      '0ae24d1f4765a286bf820afde796daae' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modChunk',
        'object' => '{"id":0,"source":0,"property_preprocess":0,"name":"fdImages","description":"Image types of the files for FileDownload","editor_type":0,"category":0,"cache_type":0,"snippet":"jpg     = image.png,\\r\\njpeg    = image.png,\\r\\nbmp     = image.png,\\r\\npng     = image.png,\\r\\ngif     = image.png,\\r\\nphp     = document-php.png,\\r\\njs      = document-code.png,\\r\\npdf     = document-pdf.png,\\r\\ntxt     = document-text.png,\\r\\nzip     = folder-zipper.png,\\r\\nhtml    = globe.png,\\r\\nxls     = document-excel.png,\\r\\nxlsx    = document-excel.png,\\r\\ndoc     = document-word.png,\\r\\ndocx    = document-word.png,\\r\\nmdb     = document-access.png,\\r\\nppt     = document-powerpoint.png,\\r\\npptx    = document-powerpoint.png,\\r\\npps     = slide-powerpoint.png,\\r\\nppsx    = slide-powerpoint.png,\\r\\nmov     = film.png,\\r\\navi     = film.png,\\r\\nmp3     = music.png,\\r\\nwav     = music.png,\\r\\nflv     = document-flash-movie.png,\\r\\ndir     = folder-horizontal.png,\\r\\ndefault = document.png","locked":0,"properties":"","static":0,"static_file":"","content":"jpg     = image.png,\\r\\njpeg    = image.png,\\r\\nbmp     = image.png,\\r\\npng     = image.png,\\r\\ngif     = image.png,\\r\\nphp     = document-php.png,\\r\\njs      = document-code.png,\\r\\npdf     = document-pdf.png,\\r\\ntxt     = document-text.png,\\r\\nzip     = folder-zipper.png,\\r\\nhtml    = globe.png,\\r\\nxls     = document-excel.png,\\r\\nxlsx    = document-excel.png,\\r\\ndoc     = document-word.png,\\r\\ndocx    = document-word.png,\\r\\nmdb     = document-access.png,\\r\\nppt     = document-powerpoint.png,\\r\\npptx    = document-powerpoint.png,\\r\\npps     = slide-powerpoint.png,\\r\\nppsx    = slide-powerpoint.png,\\r\\nmov     = film.png,\\r\\navi     = film.png,\\r\\nmp3     = music.png,\\r\\nwav     = music.png,\\r\\nflv     = document-flash-movie.png,\\r\\ndir     = folder-horizontal.png,\\r\\ndefault = document.png"}',
        'guid' => '6a19e843b481e6dffd5664eb54a88a8f',
        'native_key' => 0,
        'signature' => 'd8b3ed584aa02fb82e25220db6d65b03',
      ),
      '1105d2f500d306c577ab046b0630a322' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modChunk',
        'object' => '{"id":1,"source":0,"property_preprocess":0,"name":"fileDescription","description":"File descriptions for FileDownload snippet","editor_type":0,"category":0,"cache_type":0,"snippet":"assets\\/downloads\\/Presentation1.pptx  | This is a presentation stuff.||\\r\\n[[++base_path]]assets\\/downloads\\/Book1.xlsx | A spreadsheet to handle. ||\\r\\n[[++core_path]]downloads\\/texts.txt |        Debug text snippets ||\\r\\n[[++core_path]]downloads\\/nonexistentfile.txt | Let\'s see if this comes up, and give a headache ||","locked":0,"properties":"","static":0,"static_file":"","content":"assets\\/downloads\\/Presentation1.pptx  | This is a presentation stuff.||\\r\\n[[++base_path]]assets\\/downloads\\/Book1.xlsx | A spreadsheet to handle. ||\\r\\n[[++core_path]]downloads\\/texts.txt |        Debug text snippets ||\\r\\n[[++core_path]]downloads\\/nonexistentfile.txt | Let\'s see if this comes up, and give a headache ||"}',
        'guid' => '2e742c1aa4d5e28f0b846ed35c87201d',
        'native_key' => 1,
        'signature' => '34f345ecc305826d7bd45dd37be0c50c',
      ),
      '9f2ad1c20ef4408ec396823adb491f67' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modChunk',
        'object' => '{"id":2,"source":0,"property_preprocess":0,"name":"FileDownloadEmailChunk","description":"Email chunk for FileDownload\'s plugin","editor_type":0,"category":0,"cache_type":0,"snippet":"<p>Hello,<\\/p>\\n<p>Someone has downloaded [[+filePath]] of the [[+ctx]] context from your website.<\\/p>\\n<p><\\/p>\\n<p>Sincerely yours,<\\/p>\\n<p><\\/p>\\n<p>Your FileDownload R\'s bot<\\/p>","locked":0,"properties":"","static":0,"static_file":"","content":"<p>Hello,<\\/p>\\n<p>Someone has downloaded [[+filePath]] of the [[+ctx]] context from your website.<\\/p>\\n<p><\\/p>\\n<p>Sincerely yours,<\\/p>\\n<p><\\/p>\\n<p>Your FileDownload R\'s bot<\\/p>"}',
        'guid' => '490ba22c40eda0d00e8c0b18097a3bde',
        'native_key' => 2,
        'signature' => '455e974da3f64ee2beb5426c3ebf39ab',
      ),
    ),
    'Snippets' => 
    array (
      '9ed61ea134d43ab23c761610d2bfed91' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":0,"source":0,"property_preprocess":0,"name":"FileDownload","description":"Snippet to list downloadable files.","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\n * The snippet for the FileDownload package for MODX Revolution\\n * This is the conversion of the original FileDownload snippet for MODX\\n * Evolution, which was originally created by Kyle Jaebker, and converted by\\n * goldsky.\\n * The main parameters are taken from that version so any conversion can be done\\n * smoothly.\\n *\\n * FileDownload is free software; you can redistribute it and\\/or modify it under the\\n * terms of the GNU General Public License as published by the Free Software\\n * Foundation; either version 2 of the License, or (at your option) any later\\n * version.\\n *\\n * FileDownload is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * FileDownload; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\n * Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @author      Kyle Jaebker <http:\\/\\/muddydogpaws.com>\\n * @author      goldsky <goldsky@fastmail.fm> <http:\\/\\/virtudraft.com>\\n * @package     filedownload\\n * @subpackage  filedownload snippet\\n *\\/\\n\\n$scriptProperties[\'encoding\'] = $modx->getOption(\'encoding\', $scriptProperties, \'UTF-8\');\\nheader(\'Content-Type: text\\/html; charset=\' . $scriptProperties[\'encoding\']);\\nmb_internal_encoding($scriptProperties[\'encoding\']);\\n\\n\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\n\\/\\/                               Main Parameters                               \\/\\/\\n\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\n\\/**\\n * This is used to specify which directories to display with the snippet.\\n * Multiple directories can be specified by seperating them with a comma.\\n * When specifying multiple directories the directory browsing functionality is\\n * no longer available.\\n * @options: comma delimited list of directories\\n * @default: null\\n * @example: assets\\/snippets\\/filedownload\\n * @var string\\n * @since ver 1.2.0\\n *\\/\\n$scriptProperties[\'getDir\'] = $modx->getOption(\'getDir\', $scriptProperties);\\n\\/**\\n * The getFile parameter will make the snippet output only the file specified.\\n * The getDir parameter is still required and getFile should be a file inside\\n * of the directory.\\n * This allows for use of the download script and download counting with a\\n * single file.\\n * @options: string\\n * @default: null\\n * @example: filedownload.php\\n * @var string\\n * @since ver 1.2.0\\n *\\/\\n$scriptProperties[\'getFile\'] = $modx->getOption(\'getFile\', $scriptProperties);\\n\\nif (empty($scriptProperties[\'getDir\']) && empty($scriptProperties[\'getFile\'])) {\\n    return \'<!-- FileDownload parameters are empty -->\';\\n}\\n\\n\\/**\\n * This allows users to view subdirectories of the directory specified with the\\n * getDir parameter. When using this feature the following templates get used:\\n * path & directory.\\n * @options: 1 | 0\\n * @default: 0\\n * @var bool\\n * @since ver 1.2.0\\n *\\/\\n$scriptProperties[\'browseDirectories\'] = $modx->getOption(\'browseDirectories\', $scriptProperties, 0);\\n\\/\\/ typo fall back\\n$scriptProperties[\'browseDirectory\'] = !empty($scriptProperties[\'browseDirectory\']) ?\\n        $scriptProperties[\'browseDirectory\'] :\\n        $scriptProperties[\'browseDirectories\'];\\n\\/**\\n * If multiple directories are specified in the getDir parameter, this property\\n * will group the files by each directory.\\n * When grouped by directory, the directory template is used to output the path\\n * above each group.\\n * @options: 1 | 0\\n * @default: 0\\n * @var bool\\n * @since ver 1.2.0\\n *\\/\\n$scriptProperties[\'groupByDirectory\'] = $modx->getOption(\'groupByDirectory\', $scriptProperties, 0);\\n\\/\\/ typo fall back\\n$scriptProperties[\'groupByDirectories\'] = !empty($scriptProperties[\'groupByDirectories\']) ?\\n        $scriptProperties[\'groupByDirectories\'] :\\n        $scriptProperties[\'groupByDirectory\'];\\n\\/**\\n * This allows descriptions to be added to the file listing included in a chunk.\\n * All of the files and descriptions should be listed in the chunk using the\\n * following format: path to file\\/filename|description||\\n * @options: the name of a chunk\\n * @default: null\\n * @example:\\n *     chunk\'s name: fileDescription\\n *     chunk content:\\n *         assets\\/files\\/test.pdf|This is a test pdf. It shows report stuff.||\\n *         assets\\/images\\/options.gif|These are the options available to you.||\\n * @var string\\n * @since ver 1.2.0\\n *\\/\\n$scriptProperties[\'chkDesc\'] = $modx->getOption(\'chkDesc\', $scriptProperties);\\n\\/**\\n * @var string\\n * @since ver 1.2.0\\n * @deprecated deprecated since version 2.0.0, use sortBy instead\\n *\\/\\n\\/\\/ $scriptProperties[\'userSort\'] = $modx->getOption(\'userSort\', $scriptProperties);\\n\\/**\\n * Sort ordering.\\n * This allows the files to be sorted by all of the fields listed below.\\n * To sort by multiple fields use a comma delimited list.\\n * When using the directory browsing feature the files will be sorted by type\\n * first, this will put the directories first in the list. When multiple folders\\n * are specified and the group by directory feature is used; the files are\\n * sorted by path first to keep the files in order by directory.\\n * @options: filename | extension | path | size | sizetext | type | date | description | count\\n * @default:\\n *     filename;\\n *     if &browseDirectories=`1`, sort by: type,filename;\\n *     if &groupByDirectory=`1`, sort by: path,filename;\\n * @var string\\n * @since ver 2.0.0\\n *\\/\\n$scriptProperties[\'sortBy\'] = $modx->getOption(\'sortBy\', $scriptProperties, \'filename\');\\n\\/**\\n * Case sensitive option for sorting\\n * @options: 1 | 0\\n * @default: 0\\n * @var bool\\n * @since ver 2.0.0\\n *\\/\\n$scriptProperties[\'sortByCaseSensitive\'] = $modx->getOption(\'sortByCaseSensitive\', $scriptProperties, 0);\\n\\/**\\n * Sort files in ascending or descending order.\\n * @options: asc | desc\\n * @default: asc\\n * @var string\\n * @since ver 1.2.0\\n *\\/\\n$scriptProperties[\'sortOrder\'] = $modx->getOption(\'sortOrder\', $scriptProperties, \'asc\');\\n\\/**\\n * Sort order option by a natural order\\n * @options: 1 | 0\\n * @default: 1\\n * @var bool\\n * @since ver 2.0.0\\n *\\/\\n$scriptProperties[\'sortOrderNatural\'] = $modx->getOption(\'sortOrderNatural\', $scriptProperties, 1);\\n\\/**\\n * This will limit the inclusion files displayed to files with a valid extension\\n * from the list.\\n * @options: comma delimited list of file extensions\\n * @default: null\\n * @example: zip,php,txt\\n * @var string\\n * @since ver 1.2.0\\n * @deprecated deprecated since 2.0.0. Use \'extShown\' instead.\\n *\\/\\n$scriptProperties[\'showExt\'] = $modx->getOption(\'showExt\', $scriptProperties);\\nif (!empty($scriptProperties[\'showExt\']) && empty($scriptProperties[\'extShown\'])) {\\n    $scriptProperties[\'extShown\'] = $scriptProperties[\'showExt\'];\\n} else {\\n    $scriptProperties[\'extShown\'] = $modx->getOption(\'extShown\', $scriptProperties);\\n}\\nunset($scriptProperties[\'showExt\']);\\n\\/**\\n * This will exclude the files displayed to files with a valid extension from\\n * the list.\\n * @options: comma delimited list of file extensions\\n * @default: null\\n * @example: zip,php,txt\\n * @var string\\n * @since ver 1.2.0\\n * @deprecated deprecated since 2.0.0. Use \'extHidden\' instead.\\n *\\/\\n$scriptProperties[\'hideExt\'] = $modx->getOption(\'hideExt\', $scriptProperties);\\nif (!empty($scriptProperties[\'hideExt\']) && empty($scriptProperties[\'extHidden\'])) {\\n    $scriptProperties[\'extHidden\'] = $scriptProperties[\'hideExt\'];\\n} else {\\n    $scriptProperties[\'extHidden\'] = $modx->getOption(\'extHidden\', $scriptProperties);\\n}\\nunset($scriptProperties[\'hideExt\']);\\n\\/**\\n * The dateFormat parameter will change the format of the date displayed for\\n * each file in the output.\\n * @options: PHP\'s date formatting\\n * @default: Y-m-d\\n * @example: m\\/d\\/Y\\n * @var string\\n * @since ver 1.2.0\\n *\\/\\n$scriptProperties[\'dateFormat\'] = $modx->getOption(\'dateFormat\', $scriptProperties, \'Y-m-d\');\\n\\n\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\n\\/\\/                                 Permissions                                 \\/\\/\\n\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\n\\n\\/**\\n * This will make the download link active for users that belong to the specified\\n * groups. Multiple groups can be specified by using a comma delimited list.\\n * @options: comma delimited list of User groups\\n * @default: null\\n * @example: Administrator, Registered Member\\n * @var string\\n * @since ver 1.2.0\\n * @deprecated deprecated since 2.0.0. Use \'userGroups\' instead.\\n *\\/\\n$scriptProperties[\'downloadGroups\'] = $modx->getOption(\'downloadGroups\', $scriptProperties);\\nif (!empty($scriptProperties[\'downloadGroups\']) && empty($scriptProperties[\'userGroups\'])) {\\n    $scriptProperties[\'userGroups\'] = $scriptProperties[\'downloadGroups\'];\\n} else {\\n    $scriptProperties[\'userGroups\'] = $modx->getOption(\'userGroups\', $scriptProperties);\\n}\\nunset($scriptProperties[\'downloadGroups\']);\\n\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\n\\/\\/                              Download Counting                              \\/\\/\\n\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\n\\/**\\n * With the countDownloads parameter set to 1, everytime a user downloads a file\\n * it will be tracked in a database table.\\n * @options: 1 | 0\\n * @default: 1\\n * @var bool\\n * @since ver 1.2.0\\n *\\/\\n$scriptProperties[\'countDownloads\'] = $modx->getOption(\'countDownloads\', $scriptProperties, 1);\\n\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\n\\/\\/                                   Images                                    \\/\\/\\n\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\n\\/**\\n * Path to the images to associate with each file extension.\\n * The images will be outputted with [+fd.image+] placeholder.\\n * @options: path to images\\n * @default: assets\\/components\\/filedownloadr\\/img\\/filetype\\n * @example: assets\\/images\\/icons\\n * @var string\\n * @since ver 1.2.0\\n *\\/\\n$scriptProperties[\'imgLocat\'] = $modx->getOption(\'imgLocat\', $scriptProperties, \'assets\\/components\\/filedownloadr\\/img\\/filetype\');\\n\\/**\\n * This allows for associations between file extensions and an image.\\n * The information on these associations should be put into a chunk similar to\\n * the example below. Associations should be in a comma delimited list with an\\n * equal sign between the extension and the image name.\\n * The directory extension is used for getting the image to associate with a\\n * directory.\\n * The default extension is applied to all files with extensions not specified\\n * in the chunk.\\n * @options: name of a chunk\\n * @default: null\\n * @example:\\n *     chunk\'s name: fdImages\\n *     chunk content:\\n *          jpg     = image.png,\\n *          png     = image.png,\\n *          gif     = image.png,\\n *          php     = document-php.png,\\n *          js      = document-code.png,\\n *          pdf     = document-pdf.png,\\n *          txt     = document-text.png,\\n *          zip     = folder-zipper.png,\\n *          html    = globe.png,\\n *          xls     = document-excel.png,\\n *          xlsx    = document-excel.png,\\n *          doc     = document-word.png,\\n *          docx    = document-word.png,\\n *          mdb     = document-access.png,\\n *          ppt     = document-powerpoint.png,\\n *          pptx    = document-powerpoint.png,\\n *          pps     = slide-powerpoint.png,\\n *          ppsx    = slide-powerpoint.png,\\n *          mov     = film.png,\\n *          avi     = film.png,\\n *          mp3     = music.png,\\n *          wav     = music.png,\\n *          flv     = document-flash-movie.png,\\n *          dir     = folder.png,\\n *          default = document.png\\n * @var string\\n * @since ver 1.2.0\\n *\\/\\n$scriptProperties[\'imgTypes\'] = $modx->getOption(\'imgTypes\', $scriptProperties);\\n\\n\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\n\\/\\/                            Templates & Styles                               \\/\\/\\n\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\n\\/**\\n * This is the directory row template (chunk\\/file) if it is accessible\\n * @options: chunk\'s name\\n * @default: tpl-dir\\n * @var string\\n * @since ver 2.0.0\\n *\\/\\n$scriptProperties[\'tplDir\'] = $modx->getOption(\'tplDir\', $scriptProperties, \'tpl-row-dir\');\\n\\/**\\n * This is the file row template (chunk\\/file)\\n * @options: chunk\'s name\\n * @default: tpl-file\\n * @var string\\n * @since ver 2.0.0\\n *\\/\\n$scriptProperties[\'tplFile\'] = $modx->getOption(\'tplFile\', $scriptProperties, \'tpl-row-file\');\\n\\/**\\n * This is the file row template (chunk\\/file)\\n * @options: chunk\'s name\\n * @default: tpl-file\\n * @var string\\n * @since ver 2.0.0\\n *\\/\\n$scriptProperties[\'tplGroupDir\'] = $modx->getOption(\'tplGroupDir\', $scriptProperties, \'tpl-group-dir\');\\n\\/**\\n * This is the container template (chunk\\/file) of all of the snippet\'s results\\n * @options: chunk\'s name\\n * @default: tpl-wrapper\\n * @var string\\n * @since ver 2.0.0\\n *\\/\\n$scriptProperties[\'tplWrapper\'] = $modx->getOption(\'tplWrapper\', $scriptProperties, \'tpl-wrapper\');\\n\\/**\\n * This is the container template for folders\\n * @options: chunk\'s name, or empty to disable\\n * @default: tpl-wrapper-dir\\n * @var string\\n * @since ver 2.0.0\\n *\\/\\n$scriptProperties[\'tplWrapperDir\'] = $modx->getOption(\'tplWrapperDir\', $scriptProperties);\\n\\/**\\n * This is the container template for files\\n * @options: chunk\'s name, or empty to disable\\n * @default: tpl-wrapper-dir\\n * @var string\\n * @since ver 2.0.0\\n *\\/\\n$scriptProperties[\'tplWrapperFile\'] = $modx->getOption(\'tplWrapperFile\', $scriptProperties);\\n\\/**\\n * index.html file\\/chunk to hide the download folders\\n * @options: chunk\'s name\\n * @default: tpl-index\\n * @var string\\n * @since ver 2.0.0\\n *\\/\\n$scriptProperties[\'tplIndex\'] = $modx->getOption(\'tplIndex\', $scriptProperties, \'tpl-index\');\\n\\n\\/**\\n * Template for forbidden access\\n * @options: @BINDINGs\\n * @default: @FILE: [[++core_path]]components\\/filedownloadr\\/elements\\/chunks\\/tpl-notallowed.chunk.tpl\\n * @var string\\n * @since ver 2.0.0\\n *\\/\\n$scriptProperties[\'tplNotAllowed\'] = $modx->getOption(\'tplNotAllowed\', $scriptProperties, \'@FILE: [[++core_path]]components\\/filedownloadr\\/elements\\/chunks\\/tpl-notallowed.chunk.tpl\');\\n\\n\\/**\\n * This specifies the class that will be applied to every other file\\/directory so\\n * a ledger look can be styled.\\n * @options: css class name\\n * @default: fd-alt\\n * @var string\\n * @since ver 1.2.0\\n * @deprecated deprecated since 2.0.0. Use \'cssAltRow\' instead.\\n *\\/\\n$scriptProperties[\'altCss\'] = $modx->getOption(\'altCss\', $scriptProperties);\\nif (!empty($scriptProperties[\'altCss\']) && empty($scriptProperties[\'cssAltRow\'])) {\\n    $scriptProperties[\'cssAltRow\'] = $scriptProperties[\'altCss\'];\\n} else {\\n    $scriptProperties[\'cssAltRow\'] = $modx->getOption(\'cssAltRow\', $scriptProperties);\\n}\\nunset($scriptProperties[\'altCss\']);\\n\\n\\/**\\n * This specifies the class that will be applied to the first directory.\\n * @options: css class name\\n * @default: fd-firstDir\\n * @var string\\n * @since ver 1.2.0\\n * @deprecated deprecated since 2.0.0. Use \'cssFirstDir\' instead.\\n *\\/\\n$scriptProperties[\'firstFolderCss\'] = $modx->getOption(\'firstFolderCss\', $scriptProperties);\\nif (!empty($scriptProperties[\'firstFolderCss\']) && empty($scriptProperties[\'cssFirstDir\'])) {\\n    $scriptProperties[\'cssFirstDir\'] = $scriptProperties[\'firstFolderCss\'];\\n} else {\\n    $scriptProperties[\'cssFirstDir\'] = $modx->getOption(\'cssFirstDir\', $scriptProperties);\\n}\\nunset($scriptProperties[\'firstFolderCss\']);\\n\\/**\\n * This specified the class that will be applied to the last directory.\\n * @options: css class name\\n * @default: fd-lastDir\\n * @var string\\n * @since ver 1.2.0\\n * @deprecated deprecated since 2.0.0. Use \'cssLastDir\' instead.\\n *\\/\\n$scriptProperties[\'lastFolderCss\'] = $modx->getOption(\'lastFolderCss\', $scriptProperties);\\nif (!empty($scriptProperties[\'lastFolderCss\']) && empty($scriptProperties[\'cssLastDir\'])) {\\n    $scriptProperties[\'cssLastDir\'] = $scriptProperties[\'lastFolderCss\'];\\n} else {\\n    $scriptProperties[\'cssLastDir\'] = $modx->getOption(\'cssLastDir\', $scriptProperties);\\n}\\nunset($scriptProperties[\'lastFolderCss\']);\\n\\/**\\n * This specified the class that will be applied to the first file.\\n * @options: css class name\\n * @default: fd-firstFile\\n * @var string\\n * @since ver 1.2.0\\n * @deprecated deprecated since 2.0.0. Use \'cssFirstFile\' instead.\\n *\\/\\n$scriptProperties[\'firstFileCss\'] = $modx->getOption(\'firstFileCss\', $scriptProperties);\\nif (!empty($scriptProperties[\'firstFileCss\']) && empty($scriptProperties[\'cssFirstFile\'])) {\\n    $scriptProperties[\'cssFirstFile\'] = $scriptProperties[\'firstFileCss\'];\\n} else {\\n    $scriptProperties[\'cssFirstFile\'] = $modx->getOption(\'cssFirstFile\', $scriptProperties);\\n}\\nunset($scriptProperties[\'firstFileCss\']);\\n\\/**\\n * This specifies the class that will be applied to the last file.\\n * @options: css class name\\n * @default: fd-lastFile\\n * @var string\\n * @since ver 1.2.0\\n * @deprecated deprecated since 2.0.0. Use \'cssLastFile\' instead.\\n *\\/\\n$scriptProperties[\'lastFileCss\'] = $modx->getOption(\'lastFileCss\', $scriptProperties);\\nif (!empty($scriptProperties[\'lastFileCss\']) && empty($scriptProperties[\'cssLastFile\'])) {\\n    $scriptProperties[\'cssLastFile\'] = $scriptProperties[\'lastFileCss\'];\\n} else {\\n    $scriptProperties[\'cssLastFile\'] = $modx->getOption(\'cssLastFile\', $scriptProperties);\\n}\\nunset($scriptProperties[\'lastFileCss\']);\\n\\/**\\n * This specifies the class that will be applied to all folders.\\n * @options: css class name\\n * @default: fd-dir\\n * @var string\\n * @since ver 1.2.0\\n * @deprecated deprecated since 2.0.0. Use \'cssDir\' instead.\\n *\\/\\n$scriptProperties[\'folderCss\'] = $modx->getOption(\'folderCss\', $scriptProperties);\\nif (!empty($scriptProperties[\'folderCss\']) && empty($scriptProperties[\'cssDir\'])) {\\n    $scriptProperties[\'cssDir\'] = $scriptProperties[\'folderCss\'];\\n} else {\\n    $scriptProperties[\'cssDir\'] = $modx->getOption(\'cssDir\', $scriptProperties);\\n}\\nunset($scriptProperties[\'folderCss\']);\\n\\/**\\n * Class name for all files\\n * @options: css class name\\n * @default: fd-file\\n * @var string\\n * @since ver 1.2.0\\n * @deprecated deprecated since 2.0.0. Use \'cssFile\' instead.\\n *\\/\\n$scriptProperties[\'cssFile\'] = $modx->getOption(\'cssFile\', $scriptProperties);\\n\\/**\\n * This specifies the class that will be applied to the directory for multi-\\n * directory grouping.\\n * @options: css class name\\n * @default: fd-group-dir\\n * @var string\\n * @since ver 1.2.0\\n * @deprecated deprecated since 2.0.0. Use \'cssGroupDir\' instead.\\n *\\/\\n$scriptProperties[\'directoryCss\'] = $modx->getOption(\'directoryCss\', $scriptProperties);\\nif (!empty($scriptProperties[\'directoryCss\']) && empty($scriptProperties[\'cssGroupDir\'])) {\\n    $scriptProperties[\'cssGroupDir\'] = $scriptProperties[\'directoryCss\'];\\n} else {\\n    $scriptProperties[\'cssGroupDir\'] = $modx->getOption(\'cssGroupDir\', $scriptProperties);\\n}\\nunset($scriptProperties[\'directoryCss\']);\\n\\/**\\n * This specifies the class that will be applied to the path when using\\n * directory browsing.\\n * @options: css class name\\n * @default: fd-path\\n * @var string\\n * @since ver 1.2.0\\n * @deprecated deprecated since 2.0.0. Use \'cssPath\' instead.\\n *\\/\\n$scriptProperties[\'pathCss\'] = $modx->getOption(\'pathCss\', $scriptProperties);\\nif (!empty($scriptProperties[\'pathCss\']) && empty($scriptProperties[\'cssPath\'])) {\\n    $scriptProperties[\'cssPath\'] = $scriptProperties[\'pathCss\'];\\n} else {\\n    $scriptProperties[\'cssPath\'] = $modx->getOption(\'cssPath\', $scriptProperties);\\n}\\nunset($scriptProperties[\'pathCss\']);\\n\\/**\\n * With this parameter set to 1, a class will be added to each file according\\n * to the file\'s extension.\\n * @options: 1 | 0\\n * @default: 0\\n * @example: a pdf would get the class: fd-pdf.\\n * @var bool\\n * @since ver 1.2.0\\n * @deprecated deprecated since 2.0.0. Use \'cssExtension\' instead.\\n *\\/\\n$scriptProperties[\'extCss\'] = $modx->getOption(\'extCss\', $scriptProperties);\\nif (!empty($scriptProperties[\'extCss\']) && empty($scriptProperties[\'cssExtension\'])) {\\n    $scriptProperties[\'cssExtension\'] = $scriptProperties[\'extCss\'];\\n} else {\\n    $scriptProperties[\'cssExtension\'] = $modx->getOption(\'cssExtension\', $scriptProperties);\\n}\\nunset($scriptProperties[\'extCss\']);\\n\\/**\\n * Prefix to the above cssExtension class name\\n * @default: fd-\\n * @example: a pdf would get the class: fd-pdf.\\n * @var string\\n * @since ver 2.0.0\\n *\\/\\n$scriptProperties[\'cssExtensionPrefix\'] = $modx->getOption(\'cssExtensionPrefix\', $scriptProperties, \'fd-\');\\n\\/**\\n * Suffix to the above cssExtension class name\\n * @default: null\\n * @example: a pdf would get the class: pdfsuffix.\\n * @var string\\n * @since ver 2.0.0\\n *\\/\\n$scriptProperties[\'cssExtensionSuffix\'] = $modx->getOption(\'cssExtensionSuffix\', $scriptProperties);\\n\\/**\\n * This property will make the list only displays files without their download links.\\n * @default: null\\n * @var string\\n * @since ver 1.2.0\\n *\\/\\n$scriptProperties[\'noDownload\'] = $modx->getOption(\'noDownload\', $scriptProperties);\\n\\/**\\n * Pass the downloading job to the plugin. This provides flexibility to do\\n * conditional statements inside the plugins, or initiate the downloading using\\n * AJAX\\n * @options: 1 | 0\\n * @default: 0\\n * @var bool\\n * @since ver 2.0.0\\n *\\/\\n$scriptProperties[\'downloadByOther\'] = $modx->getOption(\'downloadByOther\', $scriptProperties);\\n\\/**\\n * Turn on the ajax mode for the script.\\n * @options: 1 | 0\\n * @default: 0\\n * @var bool\\n * @since ver 2.0.0\\n *\\/\\n$scriptProperties[\'ajaxMode\'] = $modx->getOption(\'ajaxMode\', $scriptProperties);\\n\\/**\\n * The MODX\'s resource page id as the Ajax processor file\\n * @var int\\n * @since ver 2.0.0\\n * @subpackage FileDownloadController\\n *\\/\\n$scriptProperties[\'ajaxControllerPage\'] = $modx->getOption(\'ajaxControllerPage\', $scriptProperties);\\n\\/**\\n * The Ajax\'s element container id\\n * @default: file-download\\n * @example <div id=\\"file-download\\"><\\/div>\\n * @var string\\n * @since ver 2.0.0\\n *\\/\\n$scriptProperties[\'ajaxContainerId\'] = $modx->getOption(\'ajaxContainerId\', $scriptProperties, \'file-download\');\\n\\/**\\n * FileDownload\'s Javascript file for the page header\\n * @default: assets\\/components\\/filedownloadr\\/js\\/fd.js\\n * @var string\\n * @since ver 2.0.0\\n *\\/\\n$scriptProperties[\'fileJs\'] = $modx->getOption(\'fileJs\', $scriptProperties\\n        , $modx->getOption(\'assets_url\') . \'components\\/filedownloadr\\/js\\/fd.js\');\\n\\/**\\n * FileDownload\'s Cascading Style Sheet file for the page header\\n * @default: assets\\/components\\/filedownloadr\\/css\\/fd.css\\n * @var string\\n * @since ver 2.0.0\\n *\\/\\n$scriptProperties[\'fileCss\'] = $modx->getOption(\'fileCss\', $scriptProperties\\n        , $modx->getOption(\'assets_url\') . \'components\\/filedownloadr\\/css\\/fd.css\');\\n\\n\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\n\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\n\\/\\/\\/\\/                                                                         \\/\\/\\/\\/\\n\\/\\/\\/\\/                   Here goes the MODX Revolution\'s part                  \\/\\/\\/\\/\\n\\/\\/\\/\\/                                                                         \\/\\/\\/\\/\\n\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\n\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\n\\n\\/**\\n * This text will be added to the file\'s hashed link to disguise the direct path\\n * @default: FileDownload\\n * @var string\\n * @since ver 2.0.0\\n *\\/\\n$scriptProperties[\'saltText\'] = $modx->getOption(\'saltText\', $scriptProperties);\\n\\/**\\n * This parameter provides the direct link\\n * @default: 0\\n * @var string\\n * @since ver 2.0.0\\n *\\/\\n$scriptProperties[\'directLink\'] = $modx->getOption(\'directLink\', $scriptProperties, 0);\\n\\/**\\n * This is a given ID to the snippet to deal with multiple snippet calls and\\n * &browseDirectories altogether\\n * @default: null\\n * @var string\\n *\\/\\n$scriptProperties[\'fdlid\'] = $modx->getOption(\'fdlid\', $scriptProperties);\\n\\/**\\n * Attach plugin to the output\\n * @default: null\\n * @var string\\n *\\/\\n$scriptProperties[\'plugins\'] = $modx->getOption(\'plugins\', $scriptProperties);\\n\\/**\\n * This is the breadcrumb\'s link template (chunk\\/file)\\n * @options: chunk\'s name\\n * @default: tpl-breadcrumb\\n * @var string\\n * @since ver 2.0.0\\n *\\/\\n$scriptProperties[\'tplBreadcrumb\'] = $modx->getOption(\'tplBreadcrumb\', $scriptProperties, \'tpl-breadcrumb\');\\n\\/**\\n * This is the separator character for the breadcrumb\\n * @default: \\/\\n * @var string\\n *\\/\\n$scriptProperties[\'breadcrumbSeparator\'] = $modx->getOption(\'breadcrumbSeparator\', $scriptProperties, \' \\/ \');\\n\\n\\/**\\n * prefix for the placeholders\\n * @default: fd.\\n * @var string\\n *\\/\\n$scriptProperties[\'prefix\'] = $modx->getOption(\'prefix\', $scriptProperties, \'fd.\');\\n\\narray_walk($scriptProperties, create_function(\'&$val\', \'if (!is_array($val)) $val = trim($val);\'));\\n\\n$fdl = $modx->getService(\'fdl\'\\n        , \'FileDownload\'\\n        , $modx->getOption(\'core_path\') . \'components\\/filedownloadr\\/models\\/filedownload\\/\'\\n);\\n\\nif (!($fdl instanceof FileDownload))\\n    return \'instanceof error.\';\\n\\n$fdl->setConfigs($scriptProperties);\\n\\nif (!$fdl->isAllowed()) {\\n    return $fdl->parseTpl($scriptProperties[\'tplNotAllowed\'], array());\\n}\\n\\nif ($scriptProperties[\'fileCss\'] !== \'disabled\') {\\n    $modx->regClientCSS($fdl->replacePropPhs($scriptProperties[\'fileCss\']));\\n}\\n\\nif ($scriptProperties[\'ajaxMode\'] && !empty($scriptProperties[\'ajaxControllerPage\'])) {\\n    \\/\\/ require dojo\\n    if (!file_exists(realpath(MODX_BASE_PATH . \'assets\\/components\\/filedownloadr\\/js\\/dojo\\/dojo.js\'))) {\\n        return \'dojo.js is required.\';\\n    }\\n    $modx->regClientStartupScript($fdl->configs[\'jsUrl\'] . \'dojo\\/dojo.js\');\\n    if ($scriptProperties[\'fileJs\'] !== \'disabled\') {\\n        $modx->regClientStartupScript($fdl->replacePropPhs($scriptProperties[\'fileJs\']));\\n    }\\n}\\n\\n\\/**\\n * do sanitizing first\\n *\\/\\nif (!empty($_GET[\'fdldir\']) || !empty($_GET[\'fdlfile\'])) {\\n    $ref = $_SERVER[\'HTTP_REFERER\'];\\n    \\/\\/ deal with multiple snippets which have &browseDirectories\\n    $xRef = @explode(\'?\', $ref);\\n    $queries = array();\\n    parse_str($xRef[1], $queries);\\n    if (!empty($queries[\'id\'])) {\\n        \\/\\/ non FURL\\n        $baseRef = $xRef[0] . \'?id=\' . $queries[\'id\'];\\n    } else {\\n        $baseRef = $xRef[0];\\n    }\\n    $page = $modx->makeUrl($modx->resource->get(\'id\'), \'\', \'\', \'full\');\\n    \\/**\\n     * check referrer and the page\\n     *\\/\\n    if ($baseRef !== $page) {\\n        return $modx->sendUnauthorizedPage();\\n    }\\n    $sanitizedGets = $modx->sanitize($_GET);\\n}\\n\\nif (empty($scriptProperties[\'downloadByOther\'])) {\\n    if (!empty($sanitizedGets[\'fdldir\'])) {\\n        $checkHash = $fdl->checkHash($modx->context->key, $sanitizedGets[\'fdldir\']);\\n        if (!$checkHash) {\\n            return;\\n        }\\n        if ((!empty($sanitizedGets[\'fdlid\']) && !empty($scriptProperties[\'fdlid\'])) &&\\n                ($sanitizedGets[\'fdlid\'] != $scriptProperties[\'fdlid\'])) {\\n            $selected = FALSE;\\n        } else {\\n            $selected = TRUE;\\n        }\\n        if ($selected) {\\n            $setDir = $fdl->setDirProp($sanitizedGets[\'fdldir\'], $selected);\\n            if (!$setDir) {\\n                return;\\n            }\\n        }\\n    } elseif (!empty($sanitizedGets[\'fdlfile\'])) {\\n        $checkHash = $fdl->checkHash($modx->context->key, $sanitizedGets[\'fdlfile\']);\\n        if (!$checkHash) {\\n            return;\\n        }\\n        $downloadFile = $fdl->downloadFile($sanitizedGets[\'fdlfile\']);\\n        if (!$downloadFile) {\\n            return;\\n        }\\n        \\/\\/ simply terminate, because this is a downloading state\\n        die();\\n    }\\n}\\n\\n$contents = $fdl->getContents();\\nif (empty($contents)) {\\n    return;\\n}\\n\\nif (!empty($toArray)) {\\n    $output = \'<pre>\' . print_r($contents, true) . \'<\\/pre>\';\\n} else {\\n    $output = $fdl->parseTemplate();\\n}\\n\\nif (!empty($toPlaceholder)) {\\n    $modx->setPlaceholder($toPlaceholder, $output);\\n    return \'\';\\n}\\nreturn $output;","locked":0,"properties":"a:38:{s:15:\\"ajaxContainerId\\";a:7:{s:4:\\"name\\";s:15:\\"ajaxContainerId\\";s:4:\\"desc\\";s:28:\\"prop_fd.ajaxContainerId_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:13:\\"file-download\\";s:7:\\"lexicon\\";s:23:\\"filedownload:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:17:\\"browseDirectories\\";a:7:{s:4:\\"name\\";s:17:\\"browseDirectories\\";s:4:\\"desc\\";s:30:\\"prop_fd.browseDirectories_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:23:\\"filedownload:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:7:\\"chkDesc\\";a:7:{s:4:\\"name\\";s:7:\\"chkDesc\\";s:4:\\"desc\\";s:20:\\"prop_fd.chkDesc_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:23:\\"filedownload:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:14:\\"countDownloads\\";a:7:{s:4:\\"name\\";s:14:\\"countDownloads\\";s:4:\\"desc\\";s:27:\\"prop_fd.countDownloads_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:1;s:7:\\"lexicon\\";s:23:\\"filedownload:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:9:\\"cssAltRow\\";a:7:{s:4:\\"name\\";s:9:\\"cssAltRow\\";s:4:\\"desc\\";s:22:\\"prop_fd.cssAltRow_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:9:\\"fd-altRow\\";s:7:\\"lexicon\\";s:23:\\"filedownload:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:6:\\"cssDir\\";a:7:{s:4:\\"name\\";s:6:\\"cssDir\\";s:4:\\"desc\\";s:19:\\"prop_fd.cssDir_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:6:\\"fd-dir\\";s:7:\\"lexicon\\";s:23:\\"filedownload:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:12:\\"cssExtension\\";a:7:{s:4:\\"name\\";s:12:\\"cssExtension\\";s:4:\\"desc\\";s:25:\\"prop_fd.cssExtension_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:23:\\"filedownload:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:18:\\"cssExtensionPrefix\\";a:7:{s:4:\\"name\\";s:18:\\"cssExtensionPrefix\\";s:4:\\"desc\\";s:31:\\"prop_fd.cssExtensionPrefix_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:3:\\"fd-\\";s:7:\\"lexicon\\";s:23:\\"filedownload:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:18:\\"cssExtensionSuffix\\";a:7:{s:4:\\"name\\";s:18:\\"cssExtensionSuffix\\";s:4:\\"desc\\";s:31:\\"prop_fd.cssExtensionSuffix_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:23:\\"filedownload:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:7:\\"cssFile\\";a:7:{s:4:\\"name\\";s:7:\\"cssFile\\";s:4:\\"desc\\";s:20:\\"prop_fd.cssFile_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:7:\\"fd-file\\";s:7:\\"lexicon\\";s:23:\\"filedownload:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:11:\\"cssFirstDir\\";a:7:{s:4:\\"name\\";s:11:\\"cssFirstDir\\";s:4:\\"desc\\";s:24:\\"prop_fd.cssFirstDir_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:11:\\"fd-firstDir\\";s:7:\\"lexicon\\";s:23:\\"filedownload:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:12:\\"cssFirstFile\\";a:7:{s:4:\\"name\\";s:12:\\"cssFirstFile\\";s:4:\\"desc\\";s:25:\\"prop_fd.cssFirstFile_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:12:\\"fd-firstFile\\";s:7:\\"lexicon\\";s:23:\\"filedownload:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:11:\\"cssGroupDir\\";a:7:{s:4:\\"name\\";s:11:\\"cssGroupDir\\";s:4:\\"desc\\";s:24:\\"prop_fd.cssGroupDir_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:12:\\"fd-group-dir\\";s:7:\\"lexicon\\";s:23:\\"filedownload:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:10:\\"cssLastDir\\";a:7:{s:4:\\"name\\";s:10:\\"cssLastDir\\";s:4:\\"desc\\";s:23:\\"prop_fd.cssLastDir_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:10:\\"fd-lastDir\\";s:7:\\"lexicon\\";s:23:\\"filedownload:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:11:\\"cssLastFile\\";a:7:{s:4:\\"name\\";s:11:\\"cssLastFile\\";s:4:\\"desc\\";s:24:\\"prop_fd.cssLastFile_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:11:\\"fd-lastFile\\";s:7:\\"lexicon\\";s:23:\\"filedownload:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:7:\\"cssPath\\";a:7:{s:4:\\"name\\";s:7:\\"cssPath\\";s:4:\\"desc\\";s:20:\\"prop_fd.cssPath_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:7:\\"fd-path\\";s:7:\\"lexicon\\";s:23:\\"filedownload:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:10:\\"dateFormat\\";a:7:{s:4:\\"name\\";s:10:\\"dateFormat\\";s:4:\\"desc\\";s:23:\\"prop_fd.dateFormat_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:5:\\"Y-m-d\\";s:7:\\"lexicon\\";s:23:\\"filedownload:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:9:\\"extHidden\\";a:7:{s:4:\\"name\\";s:9:\\"extHidden\\";s:4:\\"desc\\";s:22:\\"prop_fd.extHidden_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:23:\\"filedownload:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:8:\\"extShown\\";a:7:{s:4:\\"name\\";s:8:\\"extShown\\";s:4:\\"desc\\";s:21:\\"prop_fd.extShown_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:23:\\"filedownload:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:7:\\"fileCss\\";a:7:{s:4:\\"name\\";s:7:\\"fileCss\\";s:4:\\"desc\\";s:20:\\"prop_fd.fileCss_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:47:\\"{assets_url}components\\/filedownloadr\\/css\\/fd.css\\";s:7:\\"lexicon\\";s:23:\\"filedownload:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:6:\\"fileJs\\";a:7:{s:4:\\"name\\";s:6:\\"fileJs\\";s:4:\\"desc\\";s:19:\\"prop_fd.fileJs_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:45:\\"{assets_url}components\\/filedownloadr\\/js\\/fd.js\\";s:7:\\"lexicon\\";s:23:\\"filedownload:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:6:\\"getDir\\";a:7:{s:4:\\"name\\";s:6:\\"getDir\\";s:4:\\"desc\\";s:19:\\"prop_fd.getDir_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:23:\\"filedownload:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:7:\\"getFile\\";a:7:{s:4:\\"name\\";s:7:\\"getFile\\";s:4:\\"desc\\";s:20:\\"prop_fd.getFile_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:23:\\"filedownload:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:16:\\"groupByDirectory\\";a:7:{s:4:\\"name\\";s:16:\\"groupByDirectory\\";s:4:\\"desc\\";s:29:\\"prop_fd.groupByDirectory_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:23:\\"filedownload:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:8:\\"imgLocat\\";a:7:{s:4:\\"name\\";s:8:\\"imgLocat\\";s:4:\\"desc\\";s:21:\\"prop_fd.imgLocat_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:50:\\"{assets_url}components\\/filedownloadr\\/img\\/filetype\\/\\";s:7:\\"lexicon\\";s:23:\\"filedownload:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:8:\\"imgTypes\\";a:7:{s:4:\\"name\\";s:8:\\"imgTypes\\";s:4:\\"desc\\";s:21:\\"prop_fd.imgTypes_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:8:\\"fdImages\\";s:7:\\"lexicon\\";s:23:\\"filedownload:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:10:\\"noDownload\\";a:7:{s:4:\\"name\\";s:10:\\"noDownload\\";s:4:\\"desc\\";s:23:\\"prop_fd.noDownload_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:0;s:7:\\"lexicon\\";s:23:\\"filedownload:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:8:\\"saltText\\";a:7:{s:4:\\"name\\";s:8:\\"saltText\\";s:4:\\"desc\\";s:21:\\"prop_fd.saltText_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:12:\\"FileDownload\\";s:7:\\"lexicon\\";s:23:\\"filedownload:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:6:\\"sortBy\\";a:7:{s:4:\\"name\\";s:6:\\"sortBy\\";s:4:\\"desc\\";s:19:\\"prop_fd.sortBy_desc\\";s:4:\\"type\\";s:4:\\"list\\";s:7:\\"options\\";a:10:{i:0;a:2:{s:4:\\"text\\";s:8:\\"filename\\";s:5:\\"value\\";s:8:\\"filename\\";}i:1;a:2:{s:4:\\"text\\";s:9:\\"extension\\";s:5:\\"value\\";s:9:\\"extension\\";}i:2;a:2:{s:4:\\"text\\";s:4:\\"path\\";s:5:\\"value\\";s:4:\\"path\\";}i:3;a:2:{s:4:\\"text\\";s:4:\\"size\\";s:5:\\"value\\";s:4:\\"size\\";}i:4;a:2:{s:4:\\"text\\";s:8:\\"sizeText\\";s:5:\\"value\\";s:8:\\"sizeText\\";}i:5;a:2:{s:4:\\"text\\";s:4:\\"type\\";s:5:\\"value\\";s:4:\\"type\\";}i:6;a:2:{s:4:\\"text\\";s:4:\\"date\\";s:5:\\"value\\";s:4:\\"date\\";}i:7;a:2:{s:4:\\"text\\";s:11:\\"description\\";s:5:\\"value\\";s:11:\\"description\\";}i:8;a:2:{s:4:\\"text\\";s:5:\\"count\\";s:5:\\"value\\";s:5:\\"count\\";}i:9;a:2:{s:4:\\"text\\";s:8:\\"fullPath\\";s:5:\\"value\\";s:8:\\"fullPath\\";}}s:5:\\"value\\";s:8:\\"filename\\";s:7:\\"lexicon\\";s:23:\\"filedownload:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:19:\\"sortByCaseSensitive\\";a:7:{s:4:\\"name\\";s:19:\\"sortByCaseSensitive\\";s:4:\\"desc\\";s:32:\\"prop_fd.sortByCaseSensitive_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:23:\\"filedownload:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:9:\\"sortOrder\\";a:7:{s:4:\\"name\\";s:9:\\"sortOrder\\";s:4:\\"desc\\";s:22:\\"prop_fd.sortOrder_desc\\";s:4:\\"type\\";s:4:\\"list\\";s:7:\\"options\\";a:2:{i:0;a:2:{s:4:\\"text\\";s:9:\\"Ascending\\";s:5:\\"value\\";s:3:\\"asc\\";}i:1;a:2:{s:4:\\"text\\";s:10:\\"Descending\\";s:5:\\"value\\";s:4:\\"desc\\";}}s:5:\\"value\\";s:3:\\"asc\\";s:7:\\"lexicon\\";s:23:\\"filedownload:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:16:\\"sortOrderNatural\\";a:7:{s:4:\\"name\\";s:16:\\"sortOrderNatural\\";s:4:\\"desc\\";s:29:\\"prop_fd.sortOrderNatural_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:1;s:7:\\"lexicon\\";s:23:\\"filedownload:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:6:\\"tplDir\\";a:7:{s:4:\\"name\\";s:6:\\"tplDir\\";s:4:\\"desc\\";s:19:\\"prop_fd.tplDir_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:11:\\"tpl-row-dir\\";s:7:\\"lexicon\\";s:23:\\"filedownload:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:7:\\"tplFile\\";a:7:{s:4:\\"name\\";s:7:\\"tplFile\\";s:4:\\"desc\\";s:20:\\"prop_fd.getFile_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:12:\\"tpl-row-file\\";s:7:\\"lexicon\\";s:23:\\"filedownload:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:11:\\"tplGroupDir\\";a:7:{s:4:\\"name\\";s:11:\\"tplGroupDir\\";s:4:\\"desc\\";s:30:\\"prop_fd.tplGroupDirectory_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:13:\\"tpl-group-dir\\";s:7:\\"lexicon\\";s:23:\\"filedownload:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:8:\\"tplIndex\\";a:7:{s:4:\\"name\\";s:8:\\"tplIndex\\";s:4:\\"desc\\";s:21:\\"prop_fd.tplIndex_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:9:\\"tpl-index\\";s:7:\\"lexicon\\";s:23:\\"filedownload:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:10:\\"tplWrapper\\";a:7:{s:4:\\"name\\";s:10:\\"tplWrapper\\";s:4:\\"desc\\";s:23:\\"prop_fd.tplWrapper_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:11:\\"tpl-wrapper\\";s:7:\\"lexicon\\";s:23:\\"filedownload:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:10:\\"userGroups\\";a:7:{s:4:\\"name\\";s:10:\\"userGroups\\";s:4:\\"desc\\";s:23:\\"prop_fd.userGroups_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:23:\\"filedownload:properties\\";s:4:\\"area\\";s:0:\\"\\";}}","moduleguid":"","static":0,"static_file":"","content":"\\/**\\n * The snippet for the FileDownload package for MODX Revolution\\n * This is the conversion of the original FileDownload snippet for MODX\\n * Evolution, which was originally created by Kyle Jaebker, and converted by\\n * goldsky.\\n * The main parameters are taken from that version so any conversion can be done\\n * smoothly.\\n *\\n * FileDownload is free software; you can redistribute it and\\/or modify it under the\\n * terms of the GNU General Public License as published by the Free Software\\n * Foundation; either version 2 of the License, or (at your option) any later\\n * version.\\n *\\n * FileDownload is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * FileDownload; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\n * Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @author      Kyle Jaebker <http:\\/\\/muddydogpaws.com>\\n * @author      goldsky <goldsky@fastmail.fm> <http:\\/\\/virtudraft.com>\\n * @package     filedownload\\n * @subpackage  filedownload snippet\\n *\\/\\n\\n$scriptProperties[\'encoding\'] = $modx->getOption(\'encoding\', $scriptProperties, \'UTF-8\');\\nheader(\'Content-Type: text\\/html; charset=\' . $scriptProperties[\'encoding\']);\\nmb_internal_encoding($scriptProperties[\'encoding\']);\\n\\n\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\n\\/\\/                               Main Parameters                               \\/\\/\\n\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\n\\/**\\n * This is used to specify which directories to display with the snippet.\\n * Multiple directories can be specified by seperating them with a comma.\\n * When specifying multiple directories the directory browsing functionality is\\n * no longer available.\\n * @options: comma delimited list of directories\\n * @default: null\\n * @example: assets\\/snippets\\/filedownload\\n * @var string\\n * @since ver 1.2.0\\n *\\/\\n$scriptProperties[\'getDir\'] = $modx->getOption(\'getDir\', $scriptProperties);\\n\\/**\\n * The getFile parameter will make the snippet output only the file specified.\\n * The getDir parameter is still required and getFile should be a file inside\\n * of the directory.\\n * This allows for use of the download script and download counting with a\\n * single file.\\n * @options: string\\n * @default: null\\n * @example: filedownload.php\\n * @var string\\n * @since ver 1.2.0\\n *\\/\\n$scriptProperties[\'getFile\'] = $modx->getOption(\'getFile\', $scriptProperties);\\n\\nif (empty($scriptProperties[\'getDir\']) && empty($scriptProperties[\'getFile\'])) {\\n    return \'<!-- FileDownload parameters are empty -->\';\\n}\\n\\n\\/**\\n * This allows users to view subdirectories of the directory specified with the\\n * getDir parameter. When using this feature the following templates get used:\\n * path & directory.\\n * @options: 1 | 0\\n * @default: 0\\n * @var bool\\n * @since ver 1.2.0\\n *\\/\\n$scriptProperties[\'browseDirectories\'] = $modx->getOption(\'browseDirectories\', $scriptProperties, 0);\\n\\/\\/ typo fall back\\n$scriptProperties[\'browseDirectory\'] = !empty($scriptProperties[\'browseDirectory\']) ?\\n        $scriptProperties[\'browseDirectory\'] :\\n        $scriptProperties[\'browseDirectories\'];\\n\\/**\\n * If multiple directories are specified in the getDir parameter, this property\\n * will group the files by each directory.\\n * When grouped by directory, the directory template is used to output the path\\n * above each group.\\n * @options: 1 | 0\\n * @default: 0\\n * @var bool\\n * @since ver 1.2.0\\n *\\/\\n$scriptProperties[\'groupByDirectory\'] = $modx->getOption(\'groupByDirectory\', $scriptProperties, 0);\\n\\/\\/ typo fall back\\n$scriptProperties[\'groupByDirectories\'] = !empty($scriptProperties[\'groupByDirectories\']) ?\\n        $scriptProperties[\'groupByDirectories\'] :\\n        $scriptProperties[\'groupByDirectory\'];\\n\\/**\\n * This allows descriptions to be added to the file listing included in a chunk.\\n * All of the files and descriptions should be listed in the chunk using the\\n * following format: path to file\\/filename|description||\\n * @options: the name of a chunk\\n * @default: null\\n * @example:\\n *     chunk\'s name: fileDescription\\n *     chunk content:\\n *         assets\\/files\\/test.pdf|This is a test pdf. It shows report stuff.||\\n *         assets\\/images\\/options.gif|These are the options available to you.||\\n * @var string\\n * @since ver 1.2.0\\n *\\/\\n$scriptProperties[\'chkDesc\'] = $modx->getOption(\'chkDesc\', $scriptProperties);\\n\\/**\\n * @var string\\n * @since ver 1.2.0\\n * @deprecated deprecated since version 2.0.0, use sortBy instead\\n *\\/\\n\\/\\/ $scriptProperties[\'userSort\'] = $modx->getOption(\'userSort\', $scriptProperties);\\n\\/**\\n * Sort ordering.\\n * This allows the files to be sorted by all of the fields listed below.\\n * To sort by multiple fields use a comma delimited list.\\n * When using the directory browsing feature the files will be sorted by type\\n * first, this will put the directories first in the list. When multiple folders\\n * are specified and the group by directory feature is used; the files are\\n * sorted by path first to keep the files in order by directory.\\n * @options: filename | extension | path | size | sizetext | type | date | description | count\\n * @default:\\n *     filename;\\n *     if &browseDirectories=`1`, sort by: type,filename;\\n *     if &groupByDirectory=`1`, sort by: path,filename;\\n * @var string\\n * @since ver 2.0.0\\n *\\/\\n$scriptProperties[\'sortBy\'] = $modx->getOption(\'sortBy\', $scriptProperties, \'filename\');\\n\\/**\\n * Case sensitive option for sorting\\n * @options: 1 | 0\\n * @default: 0\\n * @var bool\\n * @since ver 2.0.0\\n *\\/\\n$scriptProperties[\'sortByCaseSensitive\'] = $modx->getOption(\'sortByCaseSensitive\', $scriptProperties, 0);\\n\\/**\\n * Sort files in ascending or descending order.\\n * @options: asc | desc\\n * @default: asc\\n * @var string\\n * @since ver 1.2.0\\n *\\/\\n$scriptProperties[\'sortOrder\'] = $modx->getOption(\'sortOrder\', $scriptProperties, \'asc\');\\n\\/**\\n * Sort order option by a natural order\\n * @options: 1 | 0\\n * @default: 1\\n * @var bool\\n * @since ver 2.0.0\\n *\\/\\n$scriptProperties[\'sortOrderNatural\'] = $modx->getOption(\'sortOrderNatural\', $scriptProperties, 1);\\n\\/**\\n * This will limit the inclusion files displayed to files with a valid extension\\n * from the list.\\n * @options: comma delimited list of file extensions\\n * @default: null\\n * @example: zip,php,txt\\n * @var string\\n * @since ver 1.2.0\\n * @deprecated deprecated since 2.0.0. Use \'extShown\' instead.\\n *\\/\\n$scriptProperties[\'showExt\'] = $modx->getOption(\'showExt\', $scriptProperties);\\nif (!empty($scriptProperties[\'showExt\']) && empty($scriptProperties[\'extShown\'])) {\\n    $scriptProperties[\'extShown\'] = $scriptProperties[\'showExt\'];\\n} else {\\n    $scriptProperties[\'extShown\'] = $modx->getOption(\'extShown\', $scriptProperties);\\n}\\nunset($scriptProperties[\'showExt\']);\\n\\/**\\n * This will exclude the files displayed to files with a valid extension from\\n * the list.\\n * @options: comma delimited list of file extensions\\n * @default: null\\n * @example: zip,php,txt\\n * @var string\\n * @since ver 1.2.0\\n * @deprecated deprecated since 2.0.0. Use \'extHidden\' instead.\\n *\\/\\n$scriptProperties[\'hideExt\'] = $modx->getOption(\'hideExt\', $scriptProperties);\\nif (!empty($scriptProperties[\'hideExt\']) && empty($scriptProperties[\'extHidden\'])) {\\n    $scriptProperties[\'extHidden\'] = $scriptProperties[\'hideExt\'];\\n} else {\\n    $scriptProperties[\'extHidden\'] = $modx->getOption(\'extHidden\', $scriptProperties);\\n}\\nunset($scriptProperties[\'hideExt\']);\\n\\/**\\n * The dateFormat parameter will change the format of the date displayed for\\n * each file in the output.\\n * @options: PHP\'s date formatting\\n * @default: Y-m-d\\n * @example: m\\/d\\/Y\\n * @var string\\n * @since ver 1.2.0\\n *\\/\\n$scriptProperties[\'dateFormat\'] = $modx->getOption(\'dateFormat\', $scriptProperties, \'Y-m-d\');\\n\\n\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\n\\/\\/                                 Permissions                                 \\/\\/\\n\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\n\\n\\/**\\n * This will make the download link active for users that belong to the specified\\n * groups. Multiple groups can be specified by using a comma delimited list.\\n * @options: comma delimited list of User groups\\n * @default: null\\n * @example: Administrator, Registered Member\\n * @var string\\n * @since ver 1.2.0\\n * @deprecated deprecated since 2.0.0. Use \'userGroups\' instead.\\n *\\/\\n$scriptProperties[\'downloadGroups\'] = $modx->getOption(\'downloadGroups\', $scriptProperties);\\nif (!empty($scriptProperties[\'downloadGroups\']) && empty($scriptProperties[\'userGroups\'])) {\\n    $scriptProperties[\'userGroups\'] = $scriptProperties[\'downloadGroups\'];\\n} else {\\n    $scriptProperties[\'userGroups\'] = $modx->getOption(\'userGroups\', $scriptProperties);\\n}\\nunset($scriptProperties[\'downloadGroups\']);\\n\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\n\\/\\/                              Download Counting                              \\/\\/\\n\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\n\\/**\\n * With the countDownloads parameter set to 1, everytime a user downloads a file\\n * it will be tracked in a database table.\\n * @options: 1 | 0\\n * @default: 1\\n * @var bool\\n * @since ver 1.2.0\\n *\\/\\n$scriptProperties[\'countDownloads\'] = $modx->getOption(\'countDownloads\', $scriptProperties, 1);\\n\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\n\\/\\/                                   Images                                    \\/\\/\\n\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\n\\/**\\n * Path to the images to associate with each file extension.\\n * The images will be outputted with [+fd.image+] placeholder.\\n * @options: path to images\\n * @default: assets\\/components\\/filedownloadr\\/img\\/filetype\\n * @example: assets\\/images\\/icons\\n * @var string\\n * @since ver 1.2.0\\n *\\/\\n$scriptProperties[\'imgLocat\'] = $modx->getOption(\'imgLocat\', $scriptProperties, \'assets\\/components\\/filedownloadr\\/img\\/filetype\');\\n\\/**\\n * This allows for associations between file extensions and an image.\\n * The information on these associations should be put into a chunk similar to\\n * the example below. Associations should be in a comma delimited list with an\\n * equal sign between the extension and the image name.\\n * The directory extension is used for getting the image to associate with a\\n * directory.\\n * The default extension is applied to all files with extensions not specified\\n * in the chunk.\\n * @options: name of a chunk\\n * @default: null\\n * @example:\\n *     chunk\'s name: fdImages\\n *     chunk content:\\n *          jpg     = image.png,\\n *          png     = image.png,\\n *          gif     = image.png,\\n *          php     = document-php.png,\\n *          js      = document-code.png,\\n *          pdf     = document-pdf.png,\\n *          txt     = document-text.png,\\n *          zip     = folder-zipper.png,\\n *          html    = globe.png,\\n *          xls     = document-excel.png,\\n *          xlsx    = document-excel.png,\\n *          doc     = document-word.png,\\n *          docx    = document-word.png,\\n *          mdb     = document-access.png,\\n *          ppt     = document-powerpoint.png,\\n *          pptx    = document-powerpoint.png,\\n *          pps     = slide-powerpoint.png,\\n *          ppsx    = slide-powerpoint.png,\\n *          mov     = film.png,\\n *          avi     = film.png,\\n *          mp3     = music.png,\\n *          wav     = music.png,\\n *          flv     = document-flash-movie.png,\\n *          dir     = folder.png,\\n *          default = document.png\\n * @var string\\n * @since ver 1.2.0\\n *\\/\\n$scriptProperties[\'imgTypes\'] = $modx->getOption(\'imgTypes\', $scriptProperties);\\n\\n\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\n\\/\\/                            Templates & Styles                               \\/\\/\\n\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\n\\/**\\n * This is the directory row template (chunk\\/file) if it is accessible\\n * @options: chunk\'s name\\n * @default: tpl-dir\\n * @var string\\n * @since ver 2.0.0\\n *\\/\\n$scriptProperties[\'tplDir\'] = $modx->getOption(\'tplDir\', $scriptProperties, \'tpl-row-dir\');\\n\\/**\\n * This is the file row template (chunk\\/file)\\n * @options: chunk\'s name\\n * @default: tpl-file\\n * @var string\\n * @since ver 2.0.0\\n *\\/\\n$scriptProperties[\'tplFile\'] = $modx->getOption(\'tplFile\', $scriptProperties, \'tpl-row-file\');\\n\\/**\\n * This is the file row template (chunk\\/file)\\n * @options: chunk\'s name\\n * @default: tpl-file\\n * @var string\\n * @since ver 2.0.0\\n *\\/\\n$scriptProperties[\'tplGroupDir\'] = $modx->getOption(\'tplGroupDir\', $scriptProperties, \'tpl-group-dir\');\\n\\/**\\n * This is the container template (chunk\\/file) of all of the snippet\'s results\\n * @options: chunk\'s name\\n * @default: tpl-wrapper\\n * @var string\\n * @since ver 2.0.0\\n *\\/\\n$scriptProperties[\'tplWrapper\'] = $modx->getOption(\'tplWrapper\', $scriptProperties, \'tpl-wrapper\');\\n\\/**\\n * This is the container template for folders\\n * @options: chunk\'s name, or empty to disable\\n * @default: tpl-wrapper-dir\\n * @var string\\n * @since ver 2.0.0\\n *\\/\\n$scriptProperties[\'tplWrapperDir\'] = $modx->getOption(\'tplWrapperDir\', $scriptProperties);\\n\\/**\\n * This is the container template for files\\n * @options: chunk\'s name, or empty to disable\\n * @default: tpl-wrapper-dir\\n * @var string\\n * @since ver 2.0.0\\n *\\/\\n$scriptProperties[\'tplWrapperFile\'] = $modx->getOption(\'tplWrapperFile\', $scriptProperties);\\n\\/**\\n * index.html file\\/chunk to hide the download folders\\n * @options: chunk\'s name\\n * @default: tpl-index\\n * @var string\\n * @since ver 2.0.0\\n *\\/\\n$scriptProperties[\'tplIndex\'] = $modx->getOption(\'tplIndex\', $scriptProperties, \'tpl-index\');\\n\\n\\/**\\n * Template for forbidden access\\n * @options: @BINDINGs\\n * @default: @FILE: [[++core_path]]components\\/filedownloadr\\/elements\\/chunks\\/tpl-notallowed.chunk.tpl\\n * @var string\\n * @since ver 2.0.0\\n *\\/\\n$scriptProperties[\'tplNotAllowed\'] = $modx->getOption(\'tplNotAllowed\', $scriptProperties, \'@FILE: [[++core_path]]components\\/filedownloadr\\/elements\\/chunks\\/tpl-notallowed.chunk.tpl\');\\n\\n\\/**\\n * This specifies the class that will be applied to every other file\\/directory so\\n * a ledger look can be styled.\\n * @options: css class name\\n * @default: fd-alt\\n * @var string\\n * @since ver 1.2.0\\n * @deprecated deprecated since 2.0.0. Use \'cssAltRow\' instead.\\n *\\/\\n$scriptProperties[\'altCss\'] = $modx->getOption(\'altCss\', $scriptProperties);\\nif (!empty($scriptProperties[\'altCss\']) && empty($scriptProperties[\'cssAltRow\'])) {\\n    $scriptProperties[\'cssAltRow\'] = $scriptProperties[\'altCss\'];\\n} else {\\n    $scriptProperties[\'cssAltRow\'] = $modx->getOption(\'cssAltRow\', $scriptProperties);\\n}\\nunset($scriptProperties[\'altCss\']);\\n\\n\\/**\\n * This specifies the class that will be applied to the first directory.\\n * @options: css class name\\n * @default: fd-firstDir\\n * @var string\\n * @since ver 1.2.0\\n * @deprecated deprecated since 2.0.0. Use \'cssFirstDir\' instead.\\n *\\/\\n$scriptProperties[\'firstFolderCss\'] = $modx->getOption(\'firstFolderCss\', $scriptProperties);\\nif (!empty($scriptProperties[\'firstFolderCss\']) && empty($scriptProperties[\'cssFirstDir\'])) {\\n    $scriptProperties[\'cssFirstDir\'] = $scriptProperties[\'firstFolderCss\'];\\n} else {\\n    $scriptProperties[\'cssFirstDir\'] = $modx->getOption(\'cssFirstDir\', $scriptProperties);\\n}\\nunset($scriptProperties[\'firstFolderCss\']);\\n\\/**\\n * This specified the class that will be applied to the last directory.\\n * @options: css class name\\n * @default: fd-lastDir\\n * @var string\\n * @since ver 1.2.0\\n * @deprecated deprecated since 2.0.0. Use \'cssLastDir\' instead.\\n *\\/\\n$scriptProperties[\'lastFolderCss\'] = $modx->getOption(\'lastFolderCss\', $scriptProperties);\\nif (!empty($scriptProperties[\'lastFolderCss\']) && empty($scriptProperties[\'cssLastDir\'])) {\\n    $scriptProperties[\'cssLastDir\'] = $scriptProperties[\'lastFolderCss\'];\\n} else {\\n    $scriptProperties[\'cssLastDir\'] = $modx->getOption(\'cssLastDir\', $scriptProperties);\\n}\\nunset($scriptProperties[\'lastFolderCss\']);\\n\\/**\\n * This specified the class that will be applied to the first file.\\n * @options: css class name\\n * @default: fd-firstFile\\n * @var string\\n * @since ver 1.2.0\\n * @deprecated deprecated since 2.0.0. Use \'cssFirstFile\' instead.\\n *\\/\\n$scriptProperties[\'firstFileCss\'] = $modx->getOption(\'firstFileCss\', $scriptProperties);\\nif (!empty($scriptProperties[\'firstFileCss\']) && empty($scriptProperties[\'cssFirstFile\'])) {\\n    $scriptProperties[\'cssFirstFile\'] = $scriptProperties[\'firstFileCss\'];\\n} else {\\n    $scriptProperties[\'cssFirstFile\'] = $modx->getOption(\'cssFirstFile\', $scriptProperties);\\n}\\nunset($scriptProperties[\'firstFileCss\']);\\n\\/**\\n * This specifies the class that will be applied to the last file.\\n * @options: css class name\\n * @default: fd-lastFile\\n * @var string\\n * @since ver 1.2.0\\n * @deprecated deprecated since 2.0.0. Use \'cssLastFile\' instead.\\n *\\/\\n$scriptProperties[\'lastFileCss\'] = $modx->getOption(\'lastFileCss\', $scriptProperties);\\nif (!empty($scriptProperties[\'lastFileCss\']) && empty($scriptProperties[\'cssLastFile\'])) {\\n    $scriptProperties[\'cssLastFile\'] = $scriptProperties[\'lastFileCss\'];\\n} else {\\n    $scriptProperties[\'cssLastFile\'] = $modx->getOption(\'cssLastFile\', $scriptProperties);\\n}\\nunset($scriptProperties[\'lastFileCss\']);\\n\\/**\\n * This specifies the class that will be applied to all folders.\\n * @options: css class name\\n * @default: fd-dir\\n * @var string\\n * @since ver 1.2.0\\n * @deprecated deprecated since 2.0.0. Use \'cssDir\' instead.\\n *\\/\\n$scriptProperties[\'folderCss\'] = $modx->getOption(\'folderCss\', $scriptProperties);\\nif (!empty($scriptProperties[\'folderCss\']) && empty($scriptProperties[\'cssDir\'])) {\\n    $scriptProperties[\'cssDir\'] = $scriptProperties[\'folderCss\'];\\n} else {\\n    $scriptProperties[\'cssDir\'] = $modx->getOption(\'cssDir\', $scriptProperties);\\n}\\nunset($scriptProperties[\'folderCss\']);\\n\\/**\\n * Class name for all files\\n * @options: css class name\\n * @default: fd-file\\n * @var string\\n * @since ver 1.2.0\\n * @deprecated deprecated since 2.0.0. Use \'cssFile\' instead.\\n *\\/\\n$scriptProperties[\'cssFile\'] = $modx->getOption(\'cssFile\', $scriptProperties);\\n\\/**\\n * This specifies the class that will be applied to the directory for multi-\\n * directory grouping.\\n * @options: css class name\\n * @default: fd-group-dir\\n * @var string\\n * @since ver 1.2.0\\n * @deprecated deprecated since 2.0.0. Use \'cssGroupDir\' instead.\\n *\\/\\n$scriptProperties[\'directoryCss\'] = $modx->getOption(\'directoryCss\', $scriptProperties);\\nif (!empty($scriptProperties[\'directoryCss\']) && empty($scriptProperties[\'cssGroupDir\'])) {\\n    $scriptProperties[\'cssGroupDir\'] = $scriptProperties[\'directoryCss\'];\\n} else {\\n    $scriptProperties[\'cssGroupDir\'] = $modx->getOption(\'cssGroupDir\', $scriptProperties);\\n}\\nunset($scriptProperties[\'directoryCss\']);\\n\\/**\\n * This specifies the class that will be applied to the path when using\\n * directory browsing.\\n * @options: css class name\\n * @default: fd-path\\n * @var string\\n * @since ver 1.2.0\\n * @deprecated deprecated since 2.0.0. Use \'cssPath\' instead.\\n *\\/\\n$scriptProperties[\'pathCss\'] = $modx->getOption(\'pathCss\', $scriptProperties);\\nif (!empty($scriptProperties[\'pathCss\']) && empty($scriptProperties[\'cssPath\'])) {\\n    $scriptProperties[\'cssPath\'] = $scriptProperties[\'pathCss\'];\\n} else {\\n    $scriptProperties[\'cssPath\'] = $modx->getOption(\'cssPath\', $scriptProperties);\\n}\\nunset($scriptProperties[\'pathCss\']);\\n\\/**\\n * With this parameter set to 1, a class will be added to each file according\\n * to the file\'s extension.\\n * @options: 1 | 0\\n * @default: 0\\n * @example: a pdf would get the class: fd-pdf.\\n * @var bool\\n * @since ver 1.2.0\\n * @deprecated deprecated since 2.0.0. Use \'cssExtension\' instead.\\n *\\/\\n$scriptProperties[\'extCss\'] = $modx->getOption(\'extCss\', $scriptProperties);\\nif (!empty($scriptProperties[\'extCss\']) && empty($scriptProperties[\'cssExtension\'])) {\\n    $scriptProperties[\'cssExtension\'] = $scriptProperties[\'extCss\'];\\n} else {\\n    $scriptProperties[\'cssExtension\'] = $modx->getOption(\'cssExtension\', $scriptProperties);\\n}\\nunset($scriptProperties[\'extCss\']);\\n\\/**\\n * Prefix to the above cssExtension class name\\n * @default: fd-\\n * @example: a pdf would get the class: fd-pdf.\\n * @var string\\n * @since ver 2.0.0\\n *\\/\\n$scriptProperties[\'cssExtensionPrefix\'] = $modx->getOption(\'cssExtensionPrefix\', $scriptProperties, \'fd-\');\\n\\/**\\n * Suffix to the above cssExtension class name\\n * @default: null\\n * @example: a pdf would get the class: pdfsuffix.\\n * @var string\\n * @since ver 2.0.0\\n *\\/\\n$scriptProperties[\'cssExtensionSuffix\'] = $modx->getOption(\'cssExtensionSuffix\', $scriptProperties);\\n\\/**\\n * This property will make the list only displays files without their download links.\\n * @default: null\\n * @var string\\n * @since ver 1.2.0\\n *\\/\\n$scriptProperties[\'noDownload\'] = $modx->getOption(\'noDownload\', $scriptProperties);\\n\\/**\\n * Pass the downloading job to the plugin. This provides flexibility to do\\n * conditional statements inside the plugins, or initiate the downloading using\\n * AJAX\\n * @options: 1 | 0\\n * @default: 0\\n * @var bool\\n * @since ver 2.0.0\\n *\\/\\n$scriptProperties[\'downloadByOther\'] = $modx->getOption(\'downloadByOther\', $scriptProperties);\\n\\/**\\n * Turn on the ajax mode for the script.\\n * @options: 1 | 0\\n * @default: 0\\n * @var bool\\n * @since ver 2.0.0\\n *\\/\\n$scriptProperties[\'ajaxMode\'] = $modx->getOption(\'ajaxMode\', $scriptProperties);\\n\\/**\\n * The MODX\'s resource page id as the Ajax processor file\\n * @var int\\n * @since ver 2.0.0\\n * @subpackage FileDownloadController\\n *\\/\\n$scriptProperties[\'ajaxControllerPage\'] = $modx->getOption(\'ajaxControllerPage\', $scriptProperties);\\n\\/**\\n * The Ajax\'s element container id\\n * @default: file-download\\n * @example <div id=\\"file-download\\"><\\/div>\\n * @var string\\n * @since ver 2.0.0\\n *\\/\\n$scriptProperties[\'ajaxContainerId\'] = $modx->getOption(\'ajaxContainerId\', $scriptProperties, \'file-download\');\\n\\/**\\n * FileDownload\'s Javascript file for the page header\\n * @default: assets\\/components\\/filedownloadr\\/js\\/fd.js\\n * @var string\\n * @since ver 2.0.0\\n *\\/\\n$scriptProperties[\'fileJs\'] = $modx->getOption(\'fileJs\', $scriptProperties\\n        , $modx->getOption(\'assets_url\') . \'components\\/filedownloadr\\/js\\/fd.js\');\\n\\/**\\n * FileDownload\'s Cascading Style Sheet file for the page header\\n * @default: assets\\/components\\/filedownloadr\\/css\\/fd.css\\n * @var string\\n * @since ver 2.0.0\\n *\\/\\n$scriptProperties[\'fileCss\'] = $modx->getOption(\'fileCss\', $scriptProperties\\n        , $modx->getOption(\'assets_url\') . \'components\\/filedownloadr\\/css\\/fd.css\');\\n\\n\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\n\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\n\\/\\/\\/\\/                                                                         \\/\\/\\/\\/\\n\\/\\/\\/\\/                   Here goes the MODX Revolution\'s part                  \\/\\/\\/\\/\\n\\/\\/\\/\\/                                                                         \\/\\/\\/\\/\\n\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\n\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\n\\n\\/**\\n * This text will be added to the file\'s hashed link to disguise the direct path\\n * @default: FileDownload\\n * @var string\\n * @since ver 2.0.0\\n *\\/\\n$scriptProperties[\'saltText\'] = $modx->getOption(\'saltText\', $scriptProperties);\\n\\/**\\n * This parameter provides the direct link\\n * @default: 0\\n * @var string\\n * @since ver 2.0.0\\n *\\/\\n$scriptProperties[\'directLink\'] = $modx->getOption(\'directLink\', $scriptProperties, 0);\\n\\/**\\n * This is a given ID to the snippet to deal with multiple snippet calls and\\n * &browseDirectories altogether\\n * @default: null\\n * @var string\\n *\\/\\n$scriptProperties[\'fdlid\'] = $modx->getOption(\'fdlid\', $scriptProperties);\\n\\/**\\n * Attach plugin to the output\\n * @default: null\\n * @var string\\n *\\/\\n$scriptProperties[\'plugins\'] = $modx->getOption(\'plugins\', $scriptProperties);\\n\\/**\\n * This is the breadcrumb\'s link template (chunk\\/file)\\n * @options: chunk\'s name\\n * @default: tpl-breadcrumb\\n * @var string\\n * @since ver 2.0.0\\n *\\/\\n$scriptProperties[\'tplBreadcrumb\'] = $modx->getOption(\'tplBreadcrumb\', $scriptProperties, \'tpl-breadcrumb\');\\n\\/**\\n * This is the separator character for the breadcrumb\\n * @default: \\/\\n * @var string\\n *\\/\\n$scriptProperties[\'breadcrumbSeparator\'] = $modx->getOption(\'breadcrumbSeparator\', $scriptProperties, \' \\/ \');\\n\\n\\/**\\n * prefix for the placeholders\\n * @default: fd.\\n * @var string\\n *\\/\\n$scriptProperties[\'prefix\'] = $modx->getOption(\'prefix\', $scriptProperties, \'fd.\');\\n\\narray_walk($scriptProperties, create_function(\'&$val\', \'if (!is_array($val)) $val = trim($val);\'));\\n\\n$fdl = $modx->getService(\'fdl\'\\n        , \'FileDownload\'\\n        , $modx->getOption(\'core_path\') . \'components\\/filedownloadr\\/models\\/filedownload\\/\'\\n);\\n\\nif (!($fdl instanceof FileDownload))\\n    return \'instanceof error.\';\\n\\n$fdl->setConfigs($scriptProperties);\\n\\nif (!$fdl->isAllowed()) {\\n    return $fdl->parseTpl($scriptProperties[\'tplNotAllowed\'], array());\\n}\\n\\nif ($scriptProperties[\'fileCss\'] !== \'disabled\') {\\n    $modx->regClientCSS($fdl->replacePropPhs($scriptProperties[\'fileCss\']));\\n}\\n\\nif ($scriptProperties[\'ajaxMode\'] && !empty($scriptProperties[\'ajaxControllerPage\'])) {\\n    \\/\\/ require dojo\\n    if (!file_exists(realpath(MODX_BASE_PATH . \'assets\\/components\\/filedownloadr\\/js\\/dojo\\/dojo.js\'))) {\\n        return \'dojo.js is required.\';\\n    }\\n    $modx->regClientStartupScript($fdl->configs[\'jsUrl\'] . \'dojo\\/dojo.js\');\\n    if ($scriptProperties[\'fileJs\'] !== \'disabled\') {\\n        $modx->regClientStartupScript($fdl->replacePropPhs($scriptProperties[\'fileJs\']));\\n    }\\n}\\n\\n\\/**\\n * do sanitizing first\\n *\\/\\nif (!empty($_GET[\'fdldir\']) || !empty($_GET[\'fdlfile\'])) {\\n    $ref = $_SERVER[\'HTTP_REFERER\'];\\n    \\/\\/ deal with multiple snippets which have &browseDirectories\\n    $xRef = @explode(\'?\', $ref);\\n    $queries = array();\\n    parse_str($xRef[1], $queries);\\n    if (!empty($queries[\'id\'])) {\\n        \\/\\/ non FURL\\n        $baseRef = $xRef[0] . \'?id=\' . $queries[\'id\'];\\n    } else {\\n        $baseRef = $xRef[0];\\n    }\\n    $page = $modx->makeUrl($modx->resource->get(\'id\'), \'\', \'\', \'full\');\\n    \\/**\\n     * check referrer and the page\\n     *\\/\\n    if ($baseRef !== $page) {\\n        return $modx->sendUnauthorizedPage();\\n    }\\n    $sanitizedGets = $modx->sanitize($_GET);\\n}\\n\\nif (empty($scriptProperties[\'downloadByOther\'])) {\\n    if (!empty($sanitizedGets[\'fdldir\'])) {\\n        $checkHash = $fdl->checkHash($modx->context->key, $sanitizedGets[\'fdldir\']);\\n        if (!$checkHash) {\\n            return;\\n        }\\n        if ((!empty($sanitizedGets[\'fdlid\']) && !empty($scriptProperties[\'fdlid\'])) &&\\n                ($sanitizedGets[\'fdlid\'] != $scriptProperties[\'fdlid\'])) {\\n            $selected = FALSE;\\n        } else {\\n            $selected = TRUE;\\n        }\\n        if ($selected) {\\n            $setDir = $fdl->setDirProp($sanitizedGets[\'fdldir\'], $selected);\\n            if (!$setDir) {\\n                return;\\n            }\\n        }\\n    } elseif (!empty($sanitizedGets[\'fdlfile\'])) {\\n        $checkHash = $fdl->checkHash($modx->context->key, $sanitizedGets[\'fdlfile\']);\\n        if (!$checkHash) {\\n            return;\\n        }\\n        $downloadFile = $fdl->downloadFile($sanitizedGets[\'fdlfile\']);\\n        if (!$downloadFile) {\\n            return;\\n        }\\n        \\/\\/ simply terminate, because this is a downloading state\\n        die();\\n    }\\n}\\n\\n$contents = $fdl->getContents();\\nif (empty($contents)) {\\n    return;\\n}\\n\\nif (!empty($toArray)) {\\n    $output = \'<pre>\' . print_r($contents, true) . \'<\\/pre>\';\\n} else {\\n    $output = $fdl->parseTemplate();\\n}\\n\\nif (!empty($toPlaceholder)) {\\n    $modx->setPlaceholder($toPlaceholder, $output);\\n    return \'\';\\n}\\nreturn $output;"}',
        'guid' => 'a5003682ef8cf3de82437d0af2987058',
        'native_key' => 0,
        'signature' => '4220a84af9223e5f307e1a11f430692e',
      ),
      '929b2f65d2a65be85aeac6b27f566f4f' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":1,"source":0,"property_preprocess":0,"name":"FileDownloadLink","description":"Snippet to provide a download link for a file.","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\r\\n * The snippet for the FileDownload package for MODX Revolution\\r\\n * This is the conversion of the original FileDownload snippet for MODX\\r\\n * Evolution, which was originally created by Kyle Jaebker, and converted by\\r\\n * goldsky.\\r\\n * The main parameters are taken from that version so any conversion can be done\\r\\n * smoothly.\\r\\n *\\r\\n * FileDownload is free software; you can redistribute it and\\/or modify it under the\\r\\n * terms of the GNU General Public License as published by the Free Software\\r\\n * Foundation; either version 2 of the License, or (at your option) any later\\r\\n * version.\\r\\n *\\r\\n * FileDownload is distributed in the hope that it will be useful, but WITHOUT ANY\\r\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\r\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\r\\n *\\r\\n * You should have received a copy of the GNU General Public License along with\\r\\n * FileDownload; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\r\\n * Suite 330, Boston, MA 02111-1307 USA\\r\\n *\\r\\n * @author      goldsky <goldsky@fastmail.fm> <http:\\/\\/virtudraft.com>\\r\\n * @package     filedownload\\r\\n * @subpackage  filedownloadlink snippet\\r\\n *\\/\\r\\n$scriptProperties[\'encoding\'] = $modx->getOption(\'encoding\', $scriptProperties, \'UTF-8\');\\r\\nheader(\'Content-Type: text\\/html; charset=\' . $scriptProperties[\'encoding\']);\\r\\nmb_internal_encoding($scriptProperties[\'encoding\']);\\r\\n\\r\\n\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\r\\n\\/\\/                               Main Parameters                               \\/\\/\\r\\n\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\r\\n\\/**\\r\\n * The getFile parameter will make the snippet output only the file specified.\\r\\n * The getDir parameter is still required and getFile should be a file inside\\r\\n * of the directory.\\r\\n * This allows for use of the download script and download counting with a\\r\\n * single file.\\r\\n * @options: string\\r\\n * @default: null\\r\\n * @var string\\r\\n *\\/\\r\\n$scriptProperties[\'getFile\'] = $modx->getOption(\'getFile\', $scriptProperties);\\r\\n\\/**\\r\\n * for Output Filter Modifier\\r\\n * @link http:\\/\\/rtfm.modx.com\\/display\\/revolution20\\/Custom+Output+Filter+Examples#CustomOutputFilterExamples-CreatingaCustomOutputModifier\\r\\n *\\/\\r\\nif (empty($scriptProperties[\'getFile\']) && !empty($scriptProperties[\'input\'])) {\\r\\n    $scriptProperties[\'getFile\'] = $scriptProperties[\'input\'];\\r\\n} elseif (empty($scriptProperties[\'getFile\']) && empty($scriptProperties[\'input\'])) {\\r\\n    return \'<!-- getFile parameter is empty -->\';\\r\\n}\\r\\n$comma = stristr($scriptProperties[\'getFile\'], \',\');\\r\\nif ($comma) {\\r\\n    return \'<!-- getFile parameter should be only one file -->\';\\r\\n}\\r\\n\\r\\n\\/**\\r\\n * This allows descriptions to be added to the file listing included in a chunk.\\r\\n * All of the files and descriptions should be listed in the chunk using the\\r\\n * following format: path to file\\/filename|description||\\r\\n * @options: the name of a chunk\\r\\n * @default: null\\r\\n * @example:\\r\\n *     chunk\'s name: fileDescription\\r\\n *     chunk content:\\r\\n *         assets\\/files\\/test.pdf|This is a test pdf. It shows report stuff.||\\r\\n *         assets\\/images\\/options.gif|These are the options available to you.||\\r\\n * @var string\\r\\n * @since ver 1.2.0\\r\\n *\\/\\r\\n$scriptProperties[\'chkDesc\'] = $modx->getOption(\'chkDesc\', $scriptProperties);\\r\\n\\/**\\r\\n * The dateFormat parameter will change the format of the date displayed for\\r\\n * each file in the output.\\r\\n * @options: PHP\'s date formatting\\r\\n * @default: Y-m-d\\r\\n * @example: m\\/d\\/Y\\r\\n * @var string\\r\\n * @since ver 1.2.0\\r\\n *\\/\\r\\n$scriptProperties[\'dateFormat\'] = $modx->getOption(\'dateFormat\', $scriptProperties, \'Y-m-d\');\\r\\n\\r\\n\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\r\\n\\/\\/                                 Permissions                                 \\/\\/\\r\\n\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\r\\n\\r\\n\\/**\\r\\n * This will make the download link active for users that belong to the specified\\r\\n * groups. Multiple groups can be specified by using a comma delimited list.\\r\\n * @options: comma delimited list of User groups\\r\\n * @default: null\\r\\n * @example: Administrator, Registered Member\\r\\n * @var string\\r\\n * @since ver 1.2.0\\r\\n * @deprecated deprecated since 2.0.0. Use \'userGroups\' instead.\\r\\n *\\/\\r\\n$scriptProperties[\'downloadGroups\'] = $modx->getOption(\'downloadGroups\', $scriptProperties);\\r\\nif (!empty($scriptProperties[\'downloadGroups\']) && empty($scriptProperties[\'userGroups\'])) {\\r\\n    $scriptProperties[\'userGroups\'] = $scriptProperties[\'downloadGroups\'];\\r\\n} else {\\r\\n    $scriptProperties[\'userGroups\'] = $modx->getOption(\'userGroups\', $scriptProperties);\\r\\n}\\r\\nunset($scriptProperties[\'downloadGroups\']);\\r\\n\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\r\\n\\/\\/                              Download Counting                              \\/\\/\\r\\n\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\r\\n\\/**\\r\\n * With the countDownloads parameter set to 1, everytime a user downloads a file\\r\\n * it will be tracked in a database table.\\r\\n * @options: 1 | 0\\r\\n * @default: 1\\r\\n * @var bool\\r\\n * @since ver 1.2.0\\r\\n *\\/\\r\\n$scriptProperties[\'countDownloads\'] = $modx->getOption(\'countDownloads\', $scriptProperties, 1);\\r\\n\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\r\\n\\/\\/                                   Images                                    \\/\\/\\r\\n\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\r\\n\\/**\\r\\n * Path to the images to associate with each file extension.\\r\\n * The images will be outputted with [+fd.image+] placeholder.\\r\\n * @options: path to images\\r\\n * @default: assets\\/components\\/filedownloadr\\/img\\/filetype\\r\\n * @example: assets\\/images\\/icons\\r\\n * @var string\\r\\n * @since ver 1.2.0\\r\\n *\\/\\r\\n$scriptProperties[\'imgLocat\'] = $modx->getOption(\'imgLocat\', $scriptProperties, \'assets\\/components\\/filedownloadr\\/img\\/filetype\');\\r\\n\\/**\\r\\n * This allows for associations between file extensions and an image.\\r\\n * The information on these associations should be put into a chunk similar to\\r\\n * the example below. Associations should be in a comma delimited list with an\\r\\n * equal sign between the extension and the image name.\\r\\n * The directory extension is used for getting the image to associate with a\\r\\n * directory.\\r\\n * The default extension is applied to all files with extensions not specified\\r\\n * in the chunk.\\r\\n * @options: name of a chunk\\r\\n * @default: null\\r\\n * @example:\\r\\n *     chunk\'s name: fdImages\\r\\n *     chunk content:jpg     = image.png,\\r\\n *     png     = image.png,\\r\\n *     gif     = image.png,\\r\\n *     php     = document-php.png,\\r\\n *     js      = document-code.png,\\r\\n *     pdf     = document-pdf.png,\\r\\n *     txt     = document-text.png,\\r\\n *     zip     = folder-zipper.png,\\r\\n *     html    = globe.png,\\r\\n *     xls     = document-excel.png,\\r\\n *     xlsx    = document-excel.png,\\r\\n *     doc     = document-word.png,\\r\\n *     docx    = document-word.png,\\r\\n *     mdb     = document-access.png,\\r\\n *     ppt     = document-powerpoint.png,\\r\\n *     pptx    = document-powerpoint.png,\\r\\n *     pps     = slide-powerpoint.png,\\r\\n *     ppsx    = slide-powerpoint.png,\\r\\n *     mov     = film.png,\\r\\n *     avi     = film.png,\\r\\n *     mp3     = music.png,\\r\\n *     wav     = music.png,\\r\\n *     flv     = document-flash-movie.png,\\r\\n *     dir     = folder.png,\\r\\n *     default = document.png\\r\\n * @var string\\r\\n * @since ver 1.2.0\\r\\n *\\/\\r\\n$scriptProperties[\'imgTypes\'] = $modx->getOption(\'imgTypes\', $scriptProperties);\\r\\n\\r\\n\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\r\\n\\/\\/                            Templates & Styles                               \\/\\/\\r\\n\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\r\\n\\/**\\r\\n * Template code to be returned\\r\\n * @options: code\\r\\n * @default: <a href=\\"[[+link]]\\">[[+filename]]<\\/a>\\r\\n * @var string\\r\\n * @since ver 2.0.0\\r\\n *\\/\\r\\n$scriptProperties[\'tpl\'] = $modx->getOption(\'tpl\', $scriptProperties, \'@CODE: <a href=\\"[[+link]]\\">[[+filename]]<\\/a> ([[+count]] downloads)\');\\r\\nif (!empty($scriptProperties[\'tplCode\'])) {\\r\\n    $scriptProperties[\'tpl\'] = \'@CODE: \' . $scriptProperties[\'tplCode\'];\\r\\n}\\r\\n\\r\\n\\/**\\r\\n * Template for forbidden access\\r\\n * @options: @BINDINGs\\r\\n * @default: @FILE: [[++core_path]]components\\/filedownloadr\\/elements\\/chunks\\/tpl-notallowed.chunk.tpl\\r\\n * @var string\\r\\n * @since ver 2.0.0\\r\\n *\\/\\r\\n$scriptProperties[\'tplNotAllowed\'] = $modx->getOption(\'tplNotAllowed\', $scriptProperties, \'@FILE: [[++core_path]]components\\/filedownloadr\\/elements\\/chunks\\/tpl-notallowed.chunk.tpl\');\\r\\n\\r\\n\\/**\\r\\n * This property will make the list only displays files without their download links.\\r\\n * @default: null\\r\\n * @var string\\r\\n * @since ver 1.2.0\\r\\n *\\/\\r\\n$scriptProperties[\'noDownload\'] = $modx->getOption(\'noDownload\', $scriptProperties);\\r\\n\\/**\\r\\n * Turn on the ajax mode for the script.\\r\\n * @options: 1 | 0\\r\\n * @default: 0\\r\\n * @var bool\\r\\n * @since ver 2.0.0\\r\\n *\\/\\r\\n$scriptProperties[\'ajaxMode\'] = $modx->getOption(\'ajaxMode\', $scriptProperties);\\r\\n\\/**\\r\\n * The MODX\'s resource page id as the Ajax processor file\\r\\n * @var int\\r\\n * @since ver 2.0.0\\r\\n * @subpackage FileDownloadController\\r\\n *\\/\\r\\n$scriptProperties[\'ajaxControllerPage\'] = $modx->getOption(\'ajaxControllerPage\', $scriptProperties);\\r\\n\\/**\\r\\n * The Ajax\'s element container id\\r\\n * @default: file-download\\r\\n * @example <div id=\\"file-download\\"><\\/div>\\r\\n * @var string\\r\\n * @since ver 2.0.0\\r\\n *\\/\\r\\n$scriptProperties[\'ajaxContainerId\'] = $modx->getOption(\'ajaxContainerId\', $scriptProperties, \'file-download\');\\r\\n\\/**\\r\\n * FileDownload\'s Javascript file for the page header\\r\\n * @default: assets\\/components\\/filedownloadr\\/js\\/fd.js\\r\\n * @var string\\r\\n * @since ver 2.0.0\\r\\n *\\/\\r\\n$scriptProperties[\'fileJs\'] = $modx->getOption(\'fileJs\', $scriptProperties\\r\\n        , $modx->getOption(\'assets_url\') . \'components\\/filedownloadr\\/js\\/fd.js\');\\r\\n\\/**\\r\\n * FileDownload\'s Cascading Style Sheet file for the page header\\r\\n * @default: assets\\/components\\/filedownloadr\\/css\\/fd.css\\r\\n * @var string\\r\\n * @since ver 2.0.0\\r\\n *\\/\\r\\n$scriptProperties[\'fileCss\'] = $modx->getOption(\'fileCss\', $scriptProperties\\r\\n        , $modx->getOption(\'assets_url\') . \'components\\/filedownloadr\\/css\\/fd.css\');\\r\\n\\r\\n\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\r\\n\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\r\\n\\/\\/\\/\\/                                                                         \\/\\/\\/\\/\\r\\n\\/\\/\\/\\/                   Here goes the MODX Revolution\'s part                  \\/\\/\\/\\/\\r\\n\\/\\/\\/\\/                                                                         \\/\\/\\/\\/\\r\\n\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\r\\n\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\r\\n\\r\\n\\/**\\r\\n * This text will be added to the file\'s hashed link to disguise the direct path\\r\\n * @default: FileDownload\\r\\n * @var string\\r\\n * @since ver 2.0.0\\r\\n *\\/\\r\\n$scriptProperties[\'saltText\'] = $modx->getOption(\'saltText\', $scriptProperties);\\r\\n\\/**\\r\\n * This parameter provides the direct link\\r\\n * @default: 0\\r\\n * @var string\\r\\n * @since ver 2.0.0\\r\\n *\\/\\r\\n$scriptProperties[\'directLink\'] = $modx->getOption(\'directLink\', $scriptProperties, 0);\\r\\n\\/**\\r\\n * This is a given ID to the snippet to deal with multiple snippet calls and\\r\\n * &browseDirectories altogether\\r\\n * @default: null\\r\\n * @var string\\r\\n *\\/\\r\\n$scriptProperties[\'plugins\'] = $modx->getOption(\'plugins\', $scriptProperties);\\r\\n\\r\\n\\/**\\r\\n * This is a given ID to the snippet to deal with multiple snippet calls and\\r\\n * &browseDirectories altogether\\r\\n * @default: null\\r\\n * @var string\\r\\n *\\/\\r\\n$scriptProperties[\'prefix\'] = $modx->getOption(\'prefix\', $scriptProperties, \'fd.\');\\r\\n\\r\\narray_walk($scriptProperties, create_function(\'&$val\', \'if (!is_array($val)) $val = trim($val);\'));\\r\\n\\r\\n$fdl = $modx->getService(\'fdl\'\\r\\n        , \'FileDownload\'\\r\\n        , $modx->getOption(\'core_path\') . \'components\\/filedownloadr\\/models\\/filedownload\\/\'\\r\\n);\\r\\n\\r\\nif (!($fdl instanceof FileDownload))\\r\\n    return \'instanceof error.\';\\r\\n\\r\\n$fdl->setConfigs($scriptProperties);\\r\\n\\r\\nif (!$fdl->isAllowed()) {\\r\\n    return $fdl->parseTpl($scriptProperties[\'tplNotAllowed\'], array());\\r\\n}\\r\\n\\r\\nif ($scriptProperties[\'fileCss\'] !== \'disabled\') {\\r\\n    $modx->regClientCSS($fdl->replacePropPhs($scriptProperties[\'fileCss\']));\\r\\n}\\r\\n\\r\\nif ($scriptProperties[\'ajaxMode\'] && !empty($scriptProperties[\'ajaxControllerPage\'])) {\\r\\n    \\/\\/ require dojo\\r\\n    if (!file_exists(realpath(MODX_BASE_PATH . \'assets\\/components\\/filedownloadr\\/js\\/dojo\\/dojo.js\'))) {\\r\\n        return \'dojo.js is required.\';\\r\\n    }\\r\\n    $modx->regClientStartupScript($fdl->configs[\'jsUrl\'] . \'dojo\\/dojo.js\');\\r\\n    if ($scriptProperties[\'fileJs\'] !== \'disabled\') {\\r\\n        $modx->regClientStartupScript($fdl->replacePropPhs($scriptProperties[\'fileJs\']));\\r\\n    }\\r\\n}\\r\\n\\r\\nif (!empty($_GET[\'fdlfile\'])) {\\r\\n    $ref = $_SERVER[\'HTTP_REFERER\'];\\r\\n    \\/\\/ deal with multiple snippets which have &browseDirectories\\r\\n    $xRef = @explode(\'?\', $ref);\\r\\n    $queries = array();\\r\\n    parse_str($xRef[1], $queries);\\r\\n    if (!empty($queries[\'id\'])) {\\r\\n        \\/\\/ non FURL\\r\\n        $baseRef = $xRef[0] . \'?id=\' . $queries[\'id\'];\\r\\n    } else {\\r\\n        $baseRef = $xRef[0];\\r\\n    }\\r\\n    $page = $modx->makeUrl($modx->resource->get(\'id\'), \'\', \'\', \'full\');\\r\\n    if ($baseRef !== $page) {\\r\\n        return $modx->sendUnauthorizedPage();\\r\\n    }\\r\\n    $sanitizedGets = $modx->sanitize($_GET);\\r\\n}\\r\\n\\r\\nif (empty($scriptProperties[\'downloadByOther\'])) {\\r\\n    if (!empty($_GET[\'fdlfile\'])) {\\r\\n        if (!$fdl->checkHash($modx->context->key, $sanitizedGets[\'fdlfile\']))\\r\\n            return;\\r\\n        $downloadFile = $fdl->downloadFile($sanitizedGets[\'fdlfile\']);\\r\\n        if (!$downloadFile) {\\r\\n            return;\\r\\n        }\\r\\n        return;\\r\\n    }\\r\\n}\\r\\n\\r\\n$contents = $fdl->getContents();\\r\\n\\r\\nif (!$contents) {\\r\\n    return;\\r\\n}\\r\\n\\r\\n$output = \'\';\\r\\n\\r\\n$fileInfos = $contents[\'file\'][0];\\r\\n$filePhs = array();\\r\\nforeach ($fileInfos as $k => $v) {\\r\\n    $filePhs[$scriptProperties[\'prefix\'] . $k] = $v;\\r\\n}\\r\\n\\/\\/ fallback without prefix\\r\\n$fileInfos = array_merge($fileInfos, $filePhs);\\r\\n\\r\\n\\/**\\r\\n * for Output Filter Modifier\\r\\n * @link http:\\/\\/rtfm.modx.com\\/display\\/revolution20\\/Custom+Output+Filter+Examples#CustomOutputFilterExamples-CreatingaCustomOutputModifier\\r\\n *\\/\\r\\nif (!empty($scriptProperties[\'input\'])) {\\r\\n    $output = $fileInfos[$scriptProperties[\'options\']];\\r\\n    if (empty($output)\\r\\n            && !is_numeric($output) \\/\\/ avoid 0 (zero) of the download counting.\\r\\n    ) {\\r\\n        $output = $fdl->parseTpl($scriptProperties[\'tpl\'], $fileInfos);\\r\\n    }\\r\\n} elseif (!empty($toArray)) {\\r\\n    $output = \'<pre>\';\\r\\n    $output .= print_r($fileInfos, true);\\r\\n    $output .= \'<\\/pre>\';\\r\\n} else {\\r\\n    $output = $fdl->parseTpl($scriptProperties[\'tpl\'], $fileInfos);\\r\\n}\\r\\n\\r\\nif (!empty($toPlaceholder)) {\\r\\n    $modx->setPlaceholder($toPlaceholder, $output);\\r\\n    return;\\r\\n}\\r\\n\\r\\nreturn $output;","locked":0,"properties":"a:11:{s:7:\\"chkDesc\\";a:7:{s:4:\\"name\\";s:7:\\"chkDesc\\";s:4:\\"desc\\";s:20:\\"prop_fd.chkDesc_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:23:\\"filedownload:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:14:\\"countDownloads\\";a:7:{s:4:\\"name\\";s:14:\\"countDownloads\\";s:4:\\"desc\\";s:27:\\"prop_fd.countDownloads_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:1;s:7:\\"lexicon\\";s:23:\\"filedownload:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:10:\\"dateFormat\\";a:7:{s:4:\\"name\\";s:10:\\"dateFormat\\";s:4:\\"desc\\";s:23:\\"prop_fd.dateFormat_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:5:\\"Y-m-d\\";s:7:\\"lexicon\\";s:23:\\"filedownload:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:7:\\"fileCss\\";a:7:{s:4:\\"name\\";s:7:\\"fileCss\\";s:4:\\"desc\\";s:20:\\"prop_fd.fileCss_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:47:\\"{assets_url}components\\/filedownloadr\\/css\\/fd.css\\";s:7:\\"lexicon\\";s:23:\\"filedownload:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:6:\\"fileJs\\";a:7:{s:4:\\"name\\";s:6:\\"fileJs\\";s:4:\\"desc\\";s:19:\\"prop_fd.fileJs_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:45:\\"{assets_url}components\\/filedownloadr\\/js\\/fd.js\\";s:7:\\"lexicon\\";s:23:\\"filedownload:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:7:\\"getFile\\";a:7:{s:4:\\"name\\";s:7:\\"getFile\\";s:4:\\"desc\\";s:20:\\"prop_fd.getFile_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:23:\\"filedownload:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:8:\\"imgLocat\\";a:7:{s:4:\\"name\\";s:8:\\"imgLocat\\";s:4:\\"desc\\";s:21:\\"prop_fd.imgLocat_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:50:\\"{assets_url}components\\/filedownloadr\\/img\\/filetype\\/\\";s:7:\\"lexicon\\";s:23:\\"filedownload:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:8:\\"imgTypes\\";a:7:{s:4:\\"name\\";s:8:\\"imgTypes\\";s:4:\\"desc\\";s:21:\\"prop_fd.imgTypes_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:8:\\"fdImages\\";s:7:\\"lexicon\\";s:23:\\"filedownload:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:8:\\"saltText\\";a:7:{s:4:\\"name\\";s:8:\\"saltText\\";s:4:\\"desc\\";s:21:\\"prop_fd.saltText_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:12:\\"FileDownload\\";s:7:\\"lexicon\\";s:23:\\"filedownload:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:3:\\"tpl\\";a:7:{s:4:\\"name\\";s:3:\\"tpl\\";s:4:\\"desc\\";s:16:\\"prop_fd.tpl_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:44:\\"@CODE: <a href=\\"[[+link]]\\">[[+filename]]<\\/a>\\";s:7:\\"lexicon\\";s:23:\\"filedownload:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:10:\\"userGroups\\";a:7:{s:4:\\"name\\";s:10:\\"userGroups\\";s:4:\\"desc\\";s:23:\\"prop_fd.userGroups_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:23:\\"filedownload:properties\\";s:4:\\"area\\";s:0:\\"\\";}}","moduleguid":"","static":0,"static_file":"","content":"\\/**\\r\\n * The snippet for the FileDownload package for MODX Revolution\\r\\n * This is the conversion of the original FileDownload snippet for MODX\\r\\n * Evolution, which was originally created by Kyle Jaebker, and converted by\\r\\n * goldsky.\\r\\n * The main parameters are taken from that version so any conversion can be done\\r\\n * smoothly.\\r\\n *\\r\\n * FileDownload is free software; you can redistribute it and\\/or modify it under the\\r\\n * terms of the GNU General Public License as published by the Free Software\\r\\n * Foundation; either version 2 of the License, or (at your option) any later\\r\\n * version.\\r\\n *\\r\\n * FileDownload is distributed in the hope that it will be useful, but WITHOUT ANY\\r\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\r\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\r\\n *\\r\\n * You should have received a copy of the GNU General Public License along with\\r\\n * FileDownload; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\r\\n * Suite 330, Boston, MA 02111-1307 USA\\r\\n *\\r\\n * @author      goldsky <goldsky@fastmail.fm> <http:\\/\\/virtudraft.com>\\r\\n * @package     filedownload\\r\\n * @subpackage  filedownloadlink snippet\\r\\n *\\/\\r\\n$scriptProperties[\'encoding\'] = $modx->getOption(\'encoding\', $scriptProperties, \'UTF-8\');\\r\\nheader(\'Content-Type: text\\/html; charset=\' . $scriptProperties[\'encoding\']);\\r\\nmb_internal_encoding($scriptProperties[\'encoding\']);\\r\\n\\r\\n\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\r\\n\\/\\/                               Main Parameters                               \\/\\/\\r\\n\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\r\\n\\/**\\r\\n * The getFile parameter will make the snippet output only the file specified.\\r\\n * The getDir parameter is still required and getFile should be a file inside\\r\\n * of the directory.\\r\\n * This allows for use of the download script and download counting with a\\r\\n * single file.\\r\\n * @options: string\\r\\n * @default: null\\r\\n * @var string\\r\\n *\\/\\r\\n$scriptProperties[\'getFile\'] = $modx->getOption(\'getFile\', $scriptProperties);\\r\\n\\/**\\r\\n * for Output Filter Modifier\\r\\n * @link http:\\/\\/rtfm.modx.com\\/display\\/revolution20\\/Custom+Output+Filter+Examples#CustomOutputFilterExamples-CreatingaCustomOutputModifier\\r\\n *\\/\\r\\nif (empty($scriptProperties[\'getFile\']) && !empty($scriptProperties[\'input\'])) {\\r\\n    $scriptProperties[\'getFile\'] = $scriptProperties[\'input\'];\\r\\n} elseif (empty($scriptProperties[\'getFile\']) && empty($scriptProperties[\'input\'])) {\\r\\n    return \'<!-- getFile parameter is empty -->\';\\r\\n}\\r\\n$comma = stristr($scriptProperties[\'getFile\'], \',\');\\r\\nif ($comma) {\\r\\n    return \'<!-- getFile parameter should be only one file -->\';\\r\\n}\\r\\n\\r\\n\\/**\\r\\n * This allows descriptions to be added to the file listing included in a chunk.\\r\\n * All of the files and descriptions should be listed in the chunk using the\\r\\n * following format: path to file\\/filename|description||\\r\\n * @options: the name of a chunk\\r\\n * @default: null\\r\\n * @example:\\r\\n *     chunk\'s name: fileDescription\\r\\n *     chunk content:\\r\\n *         assets\\/files\\/test.pdf|This is a test pdf. It shows report stuff.||\\r\\n *         assets\\/images\\/options.gif|These are the options available to you.||\\r\\n * @var string\\r\\n * @since ver 1.2.0\\r\\n *\\/\\r\\n$scriptProperties[\'chkDesc\'] = $modx->getOption(\'chkDesc\', $scriptProperties);\\r\\n\\/**\\r\\n * The dateFormat parameter will change the format of the date displayed for\\r\\n * each file in the output.\\r\\n * @options: PHP\'s date formatting\\r\\n * @default: Y-m-d\\r\\n * @example: m\\/d\\/Y\\r\\n * @var string\\r\\n * @since ver 1.2.0\\r\\n *\\/\\r\\n$scriptProperties[\'dateFormat\'] = $modx->getOption(\'dateFormat\', $scriptProperties, \'Y-m-d\');\\r\\n\\r\\n\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\r\\n\\/\\/                                 Permissions                                 \\/\\/\\r\\n\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\r\\n\\r\\n\\/**\\r\\n * This will make the download link active for users that belong to the specified\\r\\n * groups. Multiple groups can be specified by using a comma delimited list.\\r\\n * @options: comma delimited list of User groups\\r\\n * @default: null\\r\\n * @example: Administrator, Registered Member\\r\\n * @var string\\r\\n * @since ver 1.2.0\\r\\n * @deprecated deprecated since 2.0.0. Use \'userGroups\' instead.\\r\\n *\\/\\r\\n$scriptProperties[\'downloadGroups\'] = $modx->getOption(\'downloadGroups\', $scriptProperties);\\r\\nif (!empty($scriptProperties[\'downloadGroups\']) && empty($scriptProperties[\'userGroups\'])) {\\r\\n    $scriptProperties[\'userGroups\'] = $scriptProperties[\'downloadGroups\'];\\r\\n} else {\\r\\n    $scriptProperties[\'userGroups\'] = $modx->getOption(\'userGroups\', $scriptProperties);\\r\\n}\\r\\nunset($scriptProperties[\'downloadGroups\']);\\r\\n\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\r\\n\\/\\/                              Download Counting                              \\/\\/\\r\\n\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\r\\n\\/**\\r\\n * With the countDownloads parameter set to 1, everytime a user downloads a file\\r\\n * it will be tracked in a database table.\\r\\n * @options: 1 | 0\\r\\n * @default: 1\\r\\n * @var bool\\r\\n * @since ver 1.2.0\\r\\n *\\/\\r\\n$scriptProperties[\'countDownloads\'] = $modx->getOption(\'countDownloads\', $scriptProperties, 1);\\r\\n\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\r\\n\\/\\/                                   Images                                    \\/\\/\\r\\n\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\r\\n\\/**\\r\\n * Path to the images to associate with each file extension.\\r\\n * The images will be outputted with [+fd.image+] placeholder.\\r\\n * @options: path to images\\r\\n * @default: assets\\/components\\/filedownloadr\\/img\\/filetype\\r\\n * @example: assets\\/images\\/icons\\r\\n * @var string\\r\\n * @since ver 1.2.0\\r\\n *\\/\\r\\n$scriptProperties[\'imgLocat\'] = $modx->getOption(\'imgLocat\', $scriptProperties, \'assets\\/components\\/filedownloadr\\/img\\/filetype\');\\r\\n\\/**\\r\\n * This allows for associations between file extensions and an image.\\r\\n * The information on these associations should be put into a chunk similar to\\r\\n * the example below. Associations should be in a comma delimited list with an\\r\\n * equal sign between the extension and the image name.\\r\\n * The directory extension is used for getting the image to associate with a\\r\\n * directory.\\r\\n * The default extension is applied to all files with extensions not specified\\r\\n * in the chunk.\\r\\n * @options: name of a chunk\\r\\n * @default: null\\r\\n * @example:\\r\\n *     chunk\'s name: fdImages\\r\\n *     chunk content:jpg     = image.png,\\r\\n *     png     = image.png,\\r\\n *     gif     = image.png,\\r\\n *     php     = document-php.png,\\r\\n *     js      = document-code.png,\\r\\n *     pdf     = document-pdf.png,\\r\\n *     txt     = document-text.png,\\r\\n *     zip     = folder-zipper.png,\\r\\n *     html    = globe.png,\\r\\n *     xls     = document-excel.png,\\r\\n *     xlsx    = document-excel.png,\\r\\n *     doc     = document-word.png,\\r\\n *     docx    = document-word.png,\\r\\n *     mdb     = document-access.png,\\r\\n *     ppt     = document-powerpoint.png,\\r\\n *     pptx    = document-powerpoint.png,\\r\\n *     pps     = slide-powerpoint.png,\\r\\n *     ppsx    = slide-powerpoint.png,\\r\\n *     mov     = film.png,\\r\\n *     avi     = film.png,\\r\\n *     mp3     = music.png,\\r\\n *     wav     = music.png,\\r\\n *     flv     = document-flash-movie.png,\\r\\n *     dir     = folder.png,\\r\\n *     default = document.png\\r\\n * @var string\\r\\n * @since ver 1.2.0\\r\\n *\\/\\r\\n$scriptProperties[\'imgTypes\'] = $modx->getOption(\'imgTypes\', $scriptProperties);\\r\\n\\r\\n\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\r\\n\\/\\/                            Templates & Styles                               \\/\\/\\r\\n\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\r\\n\\/**\\r\\n * Template code to be returned\\r\\n * @options: code\\r\\n * @default: <a href=\\"[[+link]]\\">[[+filename]]<\\/a>\\r\\n * @var string\\r\\n * @since ver 2.0.0\\r\\n *\\/\\r\\n$scriptProperties[\'tpl\'] = $modx->getOption(\'tpl\', $scriptProperties, \'@CODE: <a href=\\"[[+link]]\\">[[+filename]]<\\/a> ([[+count]] downloads)\');\\r\\nif (!empty($scriptProperties[\'tplCode\'])) {\\r\\n    $scriptProperties[\'tpl\'] = \'@CODE: \' . $scriptProperties[\'tplCode\'];\\r\\n}\\r\\n\\r\\n\\/**\\r\\n * Template for forbidden access\\r\\n * @options: @BINDINGs\\r\\n * @default: @FILE: [[++core_path]]components\\/filedownloadr\\/elements\\/chunks\\/tpl-notallowed.chunk.tpl\\r\\n * @var string\\r\\n * @since ver 2.0.0\\r\\n *\\/\\r\\n$scriptProperties[\'tplNotAllowed\'] = $modx->getOption(\'tplNotAllowed\', $scriptProperties, \'@FILE: [[++core_path]]components\\/filedownloadr\\/elements\\/chunks\\/tpl-notallowed.chunk.tpl\');\\r\\n\\r\\n\\/**\\r\\n * This property will make the list only displays files without their download links.\\r\\n * @default: null\\r\\n * @var string\\r\\n * @since ver 1.2.0\\r\\n *\\/\\r\\n$scriptProperties[\'noDownload\'] = $modx->getOption(\'noDownload\', $scriptProperties);\\r\\n\\/**\\r\\n * Turn on the ajax mode for the script.\\r\\n * @options: 1 | 0\\r\\n * @default: 0\\r\\n * @var bool\\r\\n * @since ver 2.0.0\\r\\n *\\/\\r\\n$scriptProperties[\'ajaxMode\'] = $modx->getOption(\'ajaxMode\', $scriptProperties);\\r\\n\\/**\\r\\n * The MODX\'s resource page id as the Ajax processor file\\r\\n * @var int\\r\\n * @since ver 2.0.0\\r\\n * @subpackage FileDownloadController\\r\\n *\\/\\r\\n$scriptProperties[\'ajaxControllerPage\'] = $modx->getOption(\'ajaxControllerPage\', $scriptProperties);\\r\\n\\/**\\r\\n * The Ajax\'s element container id\\r\\n * @default: file-download\\r\\n * @example <div id=\\"file-download\\"><\\/div>\\r\\n * @var string\\r\\n * @since ver 2.0.0\\r\\n *\\/\\r\\n$scriptProperties[\'ajaxContainerId\'] = $modx->getOption(\'ajaxContainerId\', $scriptProperties, \'file-download\');\\r\\n\\/**\\r\\n * FileDownload\'s Javascript file for the page header\\r\\n * @default: assets\\/components\\/filedownloadr\\/js\\/fd.js\\r\\n * @var string\\r\\n * @since ver 2.0.0\\r\\n *\\/\\r\\n$scriptProperties[\'fileJs\'] = $modx->getOption(\'fileJs\', $scriptProperties\\r\\n        , $modx->getOption(\'assets_url\') . \'components\\/filedownloadr\\/js\\/fd.js\');\\r\\n\\/**\\r\\n * FileDownload\'s Cascading Style Sheet file for the page header\\r\\n * @default: assets\\/components\\/filedownloadr\\/css\\/fd.css\\r\\n * @var string\\r\\n * @since ver 2.0.0\\r\\n *\\/\\r\\n$scriptProperties[\'fileCss\'] = $modx->getOption(\'fileCss\', $scriptProperties\\r\\n        , $modx->getOption(\'assets_url\') . \'components\\/filedownloadr\\/css\\/fd.css\');\\r\\n\\r\\n\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\r\\n\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\r\\n\\/\\/\\/\\/                                                                         \\/\\/\\/\\/\\r\\n\\/\\/\\/\\/                   Here goes the MODX Revolution\'s part                  \\/\\/\\/\\/\\r\\n\\/\\/\\/\\/                                                                         \\/\\/\\/\\/\\r\\n\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\r\\n\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\r\\n\\r\\n\\/**\\r\\n * This text will be added to the file\'s hashed link to disguise the direct path\\r\\n * @default: FileDownload\\r\\n * @var string\\r\\n * @since ver 2.0.0\\r\\n *\\/\\r\\n$scriptProperties[\'saltText\'] = $modx->getOption(\'saltText\', $scriptProperties);\\r\\n\\/**\\r\\n * This parameter provides the direct link\\r\\n * @default: 0\\r\\n * @var string\\r\\n * @since ver 2.0.0\\r\\n *\\/\\r\\n$scriptProperties[\'directLink\'] = $modx->getOption(\'directLink\', $scriptProperties, 0);\\r\\n\\/**\\r\\n * This is a given ID to the snippet to deal with multiple snippet calls and\\r\\n * &browseDirectories altogether\\r\\n * @default: null\\r\\n * @var string\\r\\n *\\/\\r\\n$scriptProperties[\'plugins\'] = $modx->getOption(\'plugins\', $scriptProperties);\\r\\n\\r\\n\\/**\\r\\n * This is a given ID to the snippet to deal with multiple snippet calls and\\r\\n * &browseDirectories altogether\\r\\n * @default: null\\r\\n * @var string\\r\\n *\\/\\r\\n$scriptProperties[\'prefix\'] = $modx->getOption(\'prefix\', $scriptProperties, \'fd.\');\\r\\n\\r\\narray_walk($scriptProperties, create_function(\'&$val\', \'if (!is_array($val)) $val = trim($val);\'));\\r\\n\\r\\n$fdl = $modx->getService(\'fdl\'\\r\\n        , \'FileDownload\'\\r\\n        , $modx->getOption(\'core_path\') . \'components\\/filedownloadr\\/models\\/filedownload\\/\'\\r\\n);\\r\\n\\r\\nif (!($fdl instanceof FileDownload))\\r\\n    return \'instanceof error.\';\\r\\n\\r\\n$fdl->setConfigs($scriptProperties);\\r\\n\\r\\nif (!$fdl->isAllowed()) {\\r\\n    return $fdl->parseTpl($scriptProperties[\'tplNotAllowed\'], array());\\r\\n}\\r\\n\\r\\nif ($scriptProperties[\'fileCss\'] !== \'disabled\') {\\r\\n    $modx->regClientCSS($fdl->replacePropPhs($scriptProperties[\'fileCss\']));\\r\\n}\\r\\n\\r\\nif ($scriptProperties[\'ajaxMode\'] && !empty($scriptProperties[\'ajaxControllerPage\'])) {\\r\\n    \\/\\/ require dojo\\r\\n    if (!file_exists(realpath(MODX_BASE_PATH . \'assets\\/components\\/filedownloadr\\/js\\/dojo\\/dojo.js\'))) {\\r\\n        return \'dojo.js is required.\';\\r\\n    }\\r\\n    $modx->regClientStartupScript($fdl->configs[\'jsUrl\'] . \'dojo\\/dojo.js\');\\r\\n    if ($scriptProperties[\'fileJs\'] !== \'disabled\') {\\r\\n        $modx->regClientStartupScript($fdl->replacePropPhs($scriptProperties[\'fileJs\']));\\r\\n    }\\r\\n}\\r\\n\\r\\nif (!empty($_GET[\'fdlfile\'])) {\\r\\n    $ref = $_SERVER[\'HTTP_REFERER\'];\\r\\n    \\/\\/ deal with multiple snippets which have &browseDirectories\\r\\n    $xRef = @explode(\'?\', $ref);\\r\\n    $queries = array();\\r\\n    parse_str($xRef[1], $queries);\\r\\n    if (!empty($queries[\'id\'])) {\\r\\n        \\/\\/ non FURL\\r\\n        $baseRef = $xRef[0] . \'?id=\' . $queries[\'id\'];\\r\\n    } else {\\r\\n        $baseRef = $xRef[0];\\r\\n    }\\r\\n    $page = $modx->makeUrl($modx->resource->get(\'id\'), \'\', \'\', \'full\');\\r\\n    if ($baseRef !== $page) {\\r\\n        return $modx->sendUnauthorizedPage();\\r\\n    }\\r\\n    $sanitizedGets = $modx->sanitize($_GET);\\r\\n}\\r\\n\\r\\nif (empty($scriptProperties[\'downloadByOther\'])) {\\r\\n    if (!empty($_GET[\'fdlfile\'])) {\\r\\n        if (!$fdl->checkHash($modx->context->key, $sanitizedGets[\'fdlfile\']))\\r\\n            return;\\r\\n        $downloadFile = $fdl->downloadFile($sanitizedGets[\'fdlfile\']);\\r\\n        if (!$downloadFile) {\\r\\n            return;\\r\\n        }\\r\\n        return;\\r\\n    }\\r\\n}\\r\\n\\r\\n$contents = $fdl->getContents();\\r\\n\\r\\nif (!$contents) {\\r\\n    return;\\r\\n}\\r\\n\\r\\n$output = \'\';\\r\\n\\r\\n$fileInfos = $contents[\'file\'][0];\\r\\n$filePhs = array();\\r\\nforeach ($fileInfos as $k => $v) {\\r\\n    $filePhs[$scriptProperties[\'prefix\'] . $k] = $v;\\r\\n}\\r\\n\\/\\/ fallback without prefix\\r\\n$fileInfos = array_merge($fileInfos, $filePhs);\\r\\n\\r\\n\\/**\\r\\n * for Output Filter Modifier\\r\\n * @link http:\\/\\/rtfm.modx.com\\/display\\/revolution20\\/Custom+Output+Filter+Examples#CustomOutputFilterExamples-CreatingaCustomOutputModifier\\r\\n *\\/\\r\\nif (!empty($scriptProperties[\'input\'])) {\\r\\n    $output = $fileInfos[$scriptProperties[\'options\']];\\r\\n    if (empty($output)\\r\\n            && !is_numeric($output) \\/\\/ avoid 0 (zero) of the download counting.\\r\\n    ) {\\r\\n        $output = $fdl->parseTpl($scriptProperties[\'tpl\'], $fileInfos);\\r\\n    }\\r\\n} elseif (!empty($toArray)) {\\r\\n    $output = \'<pre>\';\\r\\n    $output .= print_r($fileInfos, true);\\r\\n    $output .= \'<\\/pre>\';\\r\\n} else {\\r\\n    $output = $fdl->parseTpl($scriptProperties[\'tpl\'], $fileInfos);\\r\\n}\\r\\n\\r\\nif (!empty($toPlaceholder)) {\\r\\n    $modx->setPlaceholder($toPlaceholder, $output);\\r\\n    return;\\r\\n}\\r\\n\\r\\nreturn $output;"}',
        'guid' => '02f7efeb668013836722f2bc764e34e4',
        'native_key' => 1,
        'signature' => 'cc603f860fe5d0c3d74f5451747b7e38',
      ),
      'ce51e23e4a142cabd85cc19e0db1c426' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":2,"source":0,"property_preprocess":0,"name":"FileDownloadEmailPlugin","description":"Snippet as a plugin for FileDownload R\'s.","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\n * avoid FATAL ERROR\\n *\\/\\nif (!($modx instanceof modX) ||\\n        !($fileDownload instanceof FileDownload) ||\\n        !($plugin instanceof FileDownloadPlugin)\\n) {\\n    return FALSE;\\n}\\n\\n\\/\\/$props = $plugin->getProperties();\\n\\/\\/$allEvents = $plugin->getAllEvents();\\n\\/\\/$appliedEvents = $plugin->getAppliedEvents();\\n\\n$e = $plugin->getEvent();\\nswitch ($e) {\\n    case \'AfterFileDownload\':\\n        \\/\\/ don\'t bother about the IP Address. FormSave provides it.\\n        $props = $plugin->getProperties();\\n        $_POST = array(\\n            \'ctx\' => $props[\'ctx\'],\\n            \'filePath\' => $props[\'filePath\'],\\n        );\\n        $_REQUEST = $_POST;\\n        $emailProps = $fileDownload->getConfig(\'emailProps\');\\n        $emailProps = json_decode($emailProps, 1);\\n        $formitProps = array_merge(array(\'hooks\' => \'email\'), $emailProps);\\n        $runFormit = $modx->runSnippet(\'FormIt\', $formitProps);\\n        if ($runFormit === FALSE) {\\n            $errMsg = \'[FileDownloadPlugin Email] unabled to send email.\';\\n            $modx->setPlaceholder($fileDownload->getConfig(\'prefix\') . \'error_message\', $errMsg);\\n            $modx->log(modX::LOG_LEVEL_ERROR, __LINE__ . \': \' . $errMsg);\\n            return FALSE;\\n        }\\n        break;\\n    default:\\n        break;\\n}\\n\\nreturn TRUE;","locked":0,"properties":null,"moduleguid":"","static":0,"static_file":"","content":"\\/**\\n * avoid FATAL ERROR\\n *\\/\\nif (!($modx instanceof modX) ||\\n        !($fileDownload instanceof FileDownload) ||\\n        !($plugin instanceof FileDownloadPlugin)\\n) {\\n    return FALSE;\\n}\\n\\n\\/\\/$props = $plugin->getProperties();\\n\\/\\/$allEvents = $plugin->getAllEvents();\\n\\/\\/$appliedEvents = $plugin->getAppliedEvents();\\n\\n$e = $plugin->getEvent();\\nswitch ($e) {\\n    case \'AfterFileDownload\':\\n        \\/\\/ don\'t bother about the IP Address. FormSave provides it.\\n        $props = $plugin->getProperties();\\n        $_POST = array(\\n            \'ctx\' => $props[\'ctx\'],\\n            \'filePath\' => $props[\'filePath\'],\\n        );\\n        $_REQUEST = $_POST;\\n        $emailProps = $fileDownload->getConfig(\'emailProps\');\\n        $emailProps = json_decode($emailProps, 1);\\n        $formitProps = array_merge(array(\'hooks\' => \'email\'), $emailProps);\\n        $runFormit = $modx->runSnippet(\'FormIt\', $formitProps);\\n        if ($runFormit === FALSE) {\\n            $errMsg = \'[FileDownloadPlugin Email] unabled to send email.\';\\n            $modx->setPlaceholder($fileDownload->getConfig(\'prefix\') . \'error_message\', $errMsg);\\n            $modx->log(modX::LOG_LEVEL_ERROR, __LINE__ . \': \' . $errMsg);\\n            return FALSE;\\n        }\\n        break;\\n    default:\\n        break;\\n}\\n\\nreturn TRUE;"}',
        'guid' => '4eeed5701adfdb9ce3cdda6f50226049',
        'native_key' => 2,
        'signature' => '58c471dbdf0aba84f9272caa399543df',
      ),
    ),
  ),
  'related_object_attributes' => 
  array (
    'Snippets' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
    'Chunks' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
  ),
  'namespace' => 'filedownloadr',
  'resolve' => 
  array (
    0 => 
    array (
      'type' => 'file',
      'body' => '{"source":"filedownloadr-1.1.6-pl\\/modCategory\\/85a4844f1c882021fc0ee71a690676d1\\/0\\/","target":"return MODX_ASSETS_PATH . \'components\\/\';","name":"filedownloadr"}',
    ),
    1 => 
    array (
      'type' => 'file',
      'body' => '{"source":"filedownloadr-1.1.6-pl\\/modCategory\\/85a4844f1c882021fc0ee71a690676d1\\/1\\/","target":"return MODX_CORE_PATH . \'components\\/\';","name":"filedownloadr"}',
    ),
    2 => 
    array (
      'type' => 'php',
      'body' => '{"source":"filedownloadr-1.1.6-pl\\/modCategory\\/85a4844f1c882021fc0ee71a690676d1.tables.resolver.resolver","type":"php","name":"tables.resolver"}',
    ),
  ),
  'validate' => 
  array (
    0 => 
    array (
      'type' => 'php',
      'body' => '{"source":"filedownloadr-1.1.6-pl\\/modCategory\\/85a4844f1c882021fc0ee71a690676d1.options.validator.validator","type":"php","name":"options.validator"}',
    ),
  ),
  'vehicle_package' => 'transport',
  'vehicle_class' => 'xPDOObjectVehicle',
  'guid' => 'd014f1f7f1482814fd958b5af4055784',
  'package' => 'modx',
  'class' => 'modCategory',
  'signature' => '85a4844f1c882021fc0ee71a690676d1',
  'native_key' => 1,
  'object' => '{"id":1,"parent":0,"category":"FileDownloadR"}',
);